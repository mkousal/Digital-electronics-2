
08-i2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000003fc  00000490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800120  00800120  000004b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d1d  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000913  00000000  00000000  000012fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000065f  00000000  00000000  00001c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  00002270  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000527  00000000  00000000  00002454  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000509  00000000  00000000  0000297b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00002e84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_13>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 20 01 	jmp	0x240	; 0x240 <__vector_18>
  4c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__vector_19>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	0d 0a       	sbc	r0, r29
	...

0000006b <__c.1972>:
  6b:	46 6f 75 6e 64 20 64 65 76 69 63 65 20 61 74 20     Found device at 
  7b:	61 64 64 72 65 73 73 3a 20 00 00                    address: ..

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d8 e0       	ldi	r29, 0x08	; 8
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	ec ef       	ldi	r30, 0xFC	; 252
  9a:	f3 e0       	ldi	r31, 0x03	; 3
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
  9e:	05 90       	lpm	r0, Z+
  a0:	0d 92       	st	X+, r0
  a2:	a0 32       	cpi	r26, 0x20	; 32
  a4:	b1 07       	cpc	r27, r17
  a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
  a8:	21 e0       	ldi	r18, 0x01	; 1
  aa:	a0 e2       	ldi	r26, 0x20	; 32
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
  b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
  b2:	a5 36       	cpi	r26, 0x65	; 101
  b4:	b2 07       	cpc	r27, r18
  b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
  b8:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  bc:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize I2C (TWI)
    twi_init();
  c4:	0e 94 ef 00 	call	0x1de	; 0x1de <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
  c8:	87 e6       	ldi	r24, 0x67	; 103
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 78 01 	call	0x2f0	; 0x2f0 <uart_init>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 33 ms and enable interrupt
    TIM1_overflow_33ms();
  d0:	e1 e8       	ldi	r30, 0x81	; 129
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	8a 7f       	andi	r24, 0xFA	; 250
  d8:	80 83       	st	Z, r24
  da:	80 81       	ld	r24, Z
  dc:	82 60       	ori	r24, 0x02	; 2
  de:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
  e0:	ef e6       	ldi	r30, 0x6F	; 111
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
  ea:	78 94       	sei

    // Put strings to ringbuffer for transmitting via UART
    uart_puts("\r\nScan I2C-bus for devices:\r\n");
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	0e 94 a6 01 	call	0x34c	; 0x34c <uart_puts>
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <main+0x30>

000000f6 <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and test I2C slave addresses 
 *           between 8 and 119.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	1f 93       	push	r17
 102:	2f 93       	push	r18
 104:	3f 93       	push	r19
 106:	4f 93       	push	r20
 108:	5f 93       	push	r21
 10a:	6f 93       	push	r22
 10c:	7f 93       	push	r23
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
 112:	af 93       	push	r26
 114:	bf 93       	push	r27
 116:	ef 93       	push	r30
 118:	ff 93       	push	r31
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	00 d0       	rcall	.+0      	; 0x120 <__vector_13+0x2a>
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
    static state_t state = STATE_IDLE;  // Current state of the FSM
    static uint8_t addr = 7;            // I2C slave address
    uint8_t result = 1;                 // ACK result from the bus
    char uart_string[2] = "00"; // String for converting numbers by itoa()
 124:	80 e3       	ldi	r24, 0x30	; 48
 126:	90 e3       	ldi	r25, 0x30	; 48
 128:	9a 83       	std	Y+2, r25	; 0x02
 12a:	89 83       	std	Y+1, r24	; 0x01

    // FSM
    switch (state)
 12c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state.1964>
 130:	82 30       	cpi	r24, 0x02	; 2
 132:	89 f0       	breq	.+34     	; 0x156 <__vector_13+0x60>
 134:	83 30       	cpi	r24, 0x03	; 3
 136:	09 f1       	breq	.+66     	; 0x17a <__vector_13+0x84>
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	c1 f5       	brne	.+112    	; 0x1ac <__vector_13+0xb6>
    {
    // Increment I2C slave address
    case STATE_IDLE:
        addr++;
 13c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	98 0f       	add	r25, r24
 144:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
		if (addr > 7 && addr < 120)
 148:	87 50       	subi	r24, 0x07	; 7
 14a:	80 37       	cpi	r24, 0x70	; 112
 14c:	90 f5       	brcc	.+100    	; 0x1b2 <__vector_13+0xbc>
			state = STATE_SEND;
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
 154:	2e c0       	rjmp	.+92     	; 0x1b2 <__vector_13+0xbc>
        // |      from Master       | from Slave |
        // +------------------------+------------+
        // | 7  6  5  4  3  2  1  0 |     ACK    |
        // |a6 a5 a4 a3 a2 a1 a0 R/W|   result   |
        // +------------------------+------------+
        result = twi_start((addr<<1) + TWI_WRITE);
 156:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 15a:	88 0f       	add	r24, r24
 15c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <twi_start>
 160:	18 2f       	mov	r17, r24
        twi_stop();
 162:	0e 94 1c 01 	call	0x238	; 0x238 <twi_stop>
        /* Test result from I2C bus. If it is 0 then move to ACK state, 
         * otherwise move to IDLE */
		if (result == 0)
 166:	11 11       	cpse	r17, r1
 168:	04 c0       	rjmp	.+8      	; 0x172 <__vector_13+0x7c>
			state = STATE_ACK;
 16a:	83 e0       	ldi	r24, 0x03	; 3
 16c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
 170:	20 c0       	rjmp	.+64     	; 0x1b2 <__vector_13+0xbc>
		else
			state = STATE_IDLE;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
 178:	1c c0       	rjmp	.+56     	; 0x1b2 <__vector_13+0xbc>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 17a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 17e:	4a e0       	ldi	r20, 0x0A	; 10
 180:	be 01       	movw	r22, r28
 182:	6f 5f       	subi	r22, 0xFF	; 255
 184:	7f 4f       	sbci	r23, 0xFF	; 255
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 c7 01 	call	0x38e	; 0x38e <__itoa_ncheck>

    // A module connected to the bus was found
    case STATE_ACK:
        // Send info about active I2C slave to UART and move to IDLE
		itoa(addr, uart_string, 10);
		uart_puts_P("Found device at address: ");
 18c:	8b e6       	ldi	r24, 0x6B	; 107
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 b5 01 	call	0x36a	; 0x36a <uart_puts_p>
		uart_puts(uart_string);
 194:	ce 01       	movw	r24, r28
 196:	01 96       	adiw	r24, 0x01	; 1
 198:	0e 94 a6 01 	call	0x34c	; 0x34c <uart_puts>
		uart_puts_P("\r\n");
 19c:	88 e6       	ldi	r24, 0x68	; 104
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 b5 01 	call	0x36a	; 0x36a <uart_puts_p>
		state = STATE_IDLE;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
        break;
 1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <__vector_13+0xbc>

    // If something unexpected happens then move to IDLE
    default:
        state = STATE_IDLE;
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
        break;
    }
 1b2:	0f 90       	pop	r0
 1b4:	0f 90       	pop	r0
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	ff 91       	pop	r31
 1bc:	ef 91       	pop	r30
 1be:	bf 91       	pop	r27
 1c0:	af 91       	pop	r26
 1c2:	9f 91       	pop	r25
 1c4:	8f 91       	pop	r24
 1c6:	7f 91       	pop	r23
 1c8:	6f 91       	pop	r22
 1ca:	5f 91       	pop	r21
 1cc:	4f 91       	pop	r20
 1ce:	3f 91       	pop	r19
 1d0:	2f 91       	pop	r18
 1d2:	1f 91       	pop	r17
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <twi_init>:
{
    TWCR = _BV(TWINT) | _BV(TWEN);

    while ((TWCR & _BV(TWINT)) == 0);
    return (TWDR);
}
 1de:	87 b1       	in	r24, 0x07	; 7
 1e0:	8f 7c       	andi	r24, 0xCF	; 207
 1e2:	87 b9       	out	0x07, r24	; 7
 1e4:	88 b1       	in	r24, 0x08	; 8
 1e6:	80 63       	ori	r24, 0x30	; 48
 1e8:	88 b9       	out	0x08, r24	; 8
 1ea:	e9 eb       	ldi	r30, 0xB9	; 185
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	8c 7f       	andi	r24, 0xFC	; 252
 1f2:	80 83       	st	Z, r24
 1f4:	88 e9       	ldi	r24, 0x98	; 152
 1f6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 1fa:	08 95       	ret

000001fc <twi_start>:
 1fc:	94 ea       	ldi	r25, 0xA4	; 164
 1fe:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 202:	ec eb       	ldi	r30, 0xBC	; 188
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	90 81       	ld	r25, Z
 208:	99 23       	and	r25, r25
 20a:	ec f7       	brge	.-6      	; 0x206 <twi_start+0xa>
 20c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 210:	84 e8       	ldi	r24, 0x84	; 132
 212:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 216:	ec eb       	ldi	r30, 0xBC	; 188
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	88 23       	and	r24, r24
 21e:	ec f7       	brge	.-6      	; 0x21a <twi_start+0x1e>
 220:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 224:	98 7f       	andi	r25, 0xF8	; 248
 226:	98 31       	cpi	r25, 0x18	; 24
 228:	29 f0       	breq	.+10     	; 0x234 <twi_start+0x38>
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 34       	cpi	r25, 0x40	; 64
 22e:	19 f4       	brne	.+6      	; 0x236 <twi_start+0x3a>
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	08 95       	ret
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	08 95       	ret

00000238 <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 238:	84 e9       	ldi	r24, 0x94	; 148
 23a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 23e:	08 95       	ret

00000240 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1
 24a:	2f 93       	push	r18
 24c:	8f 93       	push	r24
 24e:	9f 93       	push	r25
 250:	ef 93       	push	r30
 252:	ff 93       	push	r31
 254:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 258:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 25c:	8c 71       	andi	r24, 0x1C	; 28
 25e:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <UART_RxHead>
 262:	ef 5f       	subi	r30, 0xFF	; 255
 264:	ef 71       	andi	r30, 0x1F	; 31
 266:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <UART_RxTail>
 26a:	e9 17       	cp	r30, r25
 26c:	39 f0       	breq	.+14     	; 0x27c <__vector_18+0x3c>
 26e:	e0 93 22 01 	sts	0x0122, r30	; 0x800122 <UART_RxHead>
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	eb 5d       	subi	r30, 0xDB	; 219
 276:	fe 4f       	sbci	r31, 0xFE	; 254
 278:	20 83       	st	Z, r18
 27a:	01 c0       	rjmp	.+2      	; 0x27e <__vector_18+0x3e>
 27c:	82 e0       	ldi	r24, 0x02	; 2
 27e:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <__data_end>
 282:	89 2b       	or	r24, r25
 284:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
 288:	ff 91       	pop	r31
 28a:	ef 91       	pop	r30
 28c:	9f 91       	pop	r25
 28e:	8f 91       	pop	r24
 290:	2f 91       	pop	r18
 292:	0f 90       	pop	r0
 294:	0f be       	out	0x3f, r0	; 63
 296:	0f 90       	pop	r0
 298:	1f 90       	pop	r1
 29a:	18 95       	reti

0000029c <__vector_19>:
 29c:	1f 92       	push	r1
 29e:	0f 92       	push	r0
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	0f 92       	push	r0
 2a4:	11 24       	eor	r1, r1
 2a6:	8f 93       	push	r24
 2a8:	9f 93       	push	r25
 2aa:	ef 93       	push	r30
 2ac:	ff 93       	push	r31
 2ae:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <UART_TxHead>
 2b2:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <UART_TxTail>
 2b6:	98 17       	cp	r25, r24
 2b8:	69 f0       	breq	.+26     	; 0x2d4 <__vector_19+0x38>
 2ba:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <UART_TxTail>
 2be:	ef 5f       	subi	r30, 0xFF	; 255
 2c0:	ef 71       	andi	r30, 0x1F	; 31
 2c2:	e0 93 23 01 	sts	0x0123, r30	; 0x800123 <UART_TxTail>
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	eb 5b       	subi	r30, 0xBB	; 187
 2ca:	fe 4f       	sbci	r31, 0xFE	; 254
 2cc:	80 81       	ld	r24, Z
 2ce:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 2d2:	05 c0       	rjmp	.+10     	; 0x2de <__vector_19+0x42>
 2d4:	e1 ec       	ldi	r30, 0xC1	; 193
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	8f 7d       	andi	r24, 0xDF	; 223
 2dc:	80 83       	st	Z, r24
 2de:	ff 91       	pop	r31
 2e0:	ef 91       	pop	r30
 2e2:	9f 91       	pop	r25
 2e4:	8f 91       	pop	r24
 2e6:	0f 90       	pop	r0
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	0f 90       	pop	r0
 2ec:	1f 90       	pop	r1
 2ee:	18 95       	reti

000002f0 <uart_init>:
 2f0:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <UART_TxHead>
 2f4:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <UART_TxTail>
 2f8:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <UART_RxHead>
 2fc:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <UART_RxTail>
 300:	99 23       	and	r25, r25
 302:	1c f4       	brge	.+6      	; 0x30a <uart_init+0x1a>
 304:	22 e0       	ldi	r18, 0x02	; 2
 306:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 30a:	90 78       	andi	r25, 0x80	; 128
 30c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 310:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 314:	88 e9       	ldi	r24, 0x98	; 152
 316:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 31a:	86 e0       	ldi	r24, 0x06	; 6
 31c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 320:	08 95       	ret

00000322 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 322:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <UART_TxHead>
 326:	2f 5f       	subi	r18, 0xFF	; 255
 328:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 32a:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <UART_TxTail>
 32e:	29 17       	cp	r18, r25
 330:	e1 f3       	breq	.-8      	; 0x32a <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 332:	e2 2f       	mov	r30, r18
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	eb 5b       	subi	r30, 0xBB	; 187
 338:	fe 4f       	sbci	r31, 0xFE	; 254
 33a:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 33c:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 340:	e1 ec       	ldi	r30, 0xC1	; 193
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	80 62       	ori	r24, 0x20	; 32
 348:	80 83       	st	Z, r24
 34a:	08 95       	ret

0000034c <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
 350:	ec 01       	movw	r28, r24
    while (*s)
 352:	88 81       	ld	r24, Y
 354:	88 23       	and	r24, r24
 356:	31 f0       	breq	.+12     	; 0x364 <uart_puts+0x18>
 358:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 35a:	0e 94 91 01 	call	0x322	; 0x322 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 35e:	89 91       	ld	r24, Y+
 360:	81 11       	cpse	r24, r1
 362:	fb cf       	rjmp	.-10     	; 0x35a <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <uart_puts_p>:
 * Purpose:  transmit string from program memory to UART
 * Input:    program memory string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s)
{
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
 36e:	ec 01       	movw	r28, r24
 370:	21 96       	adiw	r28, 0x01	; 1
 372:	fc 01       	movw	r30, r24
 374:	84 91       	lpm	r24, Z
 376:	88 23       	and	r24, r24
 378:	39 f0       	breq	.+14     	; 0x388 <uart_puts_p+0x1e>
        uart_putc(c);
 37a:	0e 94 91 01 	call	0x322	; 0x322 <uart_putc>
 **************************************************************************/
void uart_puts_p(const char *progmem_s)
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
 37e:	fe 01       	movw	r30, r28
 380:	84 91       	lpm	r24, Z
 382:	21 96       	adiw	r28, 0x01	; 1
 384:	81 11       	cpse	r24, r1
 386:	f9 cf       	rjmp	.-14     	; 0x37a <uart_puts_p+0x10>
        uart_putc(c);
}/* uart_puts_p */
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	08 95       	ret

0000038e <__itoa_ncheck>:
 38e:	bb 27       	eor	r27, r27
 390:	4a 30       	cpi	r20, 0x0A	; 10
 392:	31 f4       	brne	.+12     	; 0x3a0 <__itoa_ncheck+0x12>
 394:	99 23       	and	r25, r25
 396:	22 f4       	brpl	.+8      	; 0x3a0 <__itoa_ncheck+0x12>
 398:	bd e2       	ldi	r27, 0x2D	; 45
 39a:	90 95       	com	r25
 39c:	81 95       	neg	r24
 39e:	9f 4f       	sbci	r25, 0xFF	; 255
 3a0:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__utoa_common>

000003a4 <__utoa_ncheck>:
 3a4:	bb 27       	eor	r27, r27

000003a6 <__utoa_common>:
 3a6:	fb 01       	movw	r30, r22
 3a8:	55 27       	eor	r21, r21
 3aa:	aa 27       	eor	r26, r26
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	aa 1f       	adc	r26, r26
 3b2:	a4 17       	cp	r26, r20
 3b4:	10 f0       	brcs	.+4      	; 0x3ba <__utoa_common+0x14>
 3b6:	a4 1b       	sub	r26, r20
 3b8:	83 95       	inc	r24
 3ba:	50 51       	subi	r21, 0x10	; 16
 3bc:	b9 f7       	brne	.-18     	; 0x3ac <__utoa_common+0x6>
 3be:	a0 5d       	subi	r26, 0xD0	; 208
 3c0:	aa 33       	cpi	r26, 0x3A	; 58
 3c2:	08 f0       	brcs	.+2      	; 0x3c6 <__utoa_common+0x20>
 3c4:	a9 5d       	subi	r26, 0xD9	; 217
 3c6:	a1 93       	st	Z+, r26
 3c8:	00 97       	sbiw	r24, 0x00	; 0
 3ca:	79 f7       	brne	.-34     	; 0x3aa <__utoa_common+0x4>
 3cc:	b1 11       	cpse	r27, r1
 3ce:	b1 93       	st	Z+, r27
 3d0:	11 92       	st	Z+, r1
 3d2:	cb 01       	movw	r24, r22
 3d4:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <strrev>

000003d8 <strrev>:
 3d8:	dc 01       	movw	r26, r24
 3da:	fc 01       	movw	r30, r24
 3dc:	67 2f       	mov	r22, r23
 3de:	71 91       	ld	r23, Z+
 3e0:	77 23       	and	r23, r23
 3e2:	e1 f7       	brne	.-8      	; 0x3dc <strrev+0x4>
 3e4:	32 97       	sbiw	r30, 0x02	; 2
 3e6:	04 c0       	rjmp	.+8      	; 0x3f0 <strrev+0x18>
 3e8:	7c 91       	ld	r23, X
 3ea:	6d 93       	st	X+, r22
 3ec:	70 83       	st	Z, r23
 3ee:	62 91       	ld	r22, -Z
 3f0:	ae 17       	cp	r26, r30
 3f2:	bf 07       	cpc	r27, r31
 3f4:	c8 f3       	brcs	.-14     	; 0x3e8 <strrev+0x10>
 3f6:	08 95       	ret

000003f8 <_exit>:
 3f8:	f8 94       	cli

000003fa <__stop_program>:
 3fa:	ff cf       	rjmp	.-2      	; 0x3fa <__stop_program>
