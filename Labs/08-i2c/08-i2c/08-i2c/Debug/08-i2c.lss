
08-i2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000042c  000004c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000042c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a5  00800120  00800120  000004e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000510  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d49  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000913  00000000  00000000  00001359  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000671  00000000  00000000  00001c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  000022e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000527  00000000  00000000  000024c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000509  00000000  00000000  000029eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00002ef4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__ctors_end>
   4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_13>
  38:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  48:	0c 94 38 01 	jmp	0x270	; 0x270 <__vector_18>
  4c:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_19>
  50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	0d 0a       	sbc	r0, r29
	...

0000006b <__c.1974>:
  6b:	46 6f 75 6e 64 20 64 65 76 69 63 65 20 61 74 20     Found device at 
  7b:	61 64 64 72 65 73 73 3a 20 00                       address: .

00000085 <__c.1969>:
  85:	0d 0a 53 63 61 6e 20 49 32 43 2d 62 75 73 20 66     ..Scan I2C-bus f
  95:	6f 72 20 64 65 76 69 63 65 73 3a 0d 0a 00 00        or devices:....

000000a4 <__ctors_end>:
  a4:	11 24       	eor	r1, r1
  a6:	1f be       	out	0x3f, r1	; 63
  a8:	cf ef       	ldi	r28, 0xFF	; 255
  aa:	d8 e0       	ldi	r29, 0x08	; 8
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
  b0:	11 e0       	ldi	r17, 0x01	; 1
  b2:	a0 e0       	ldi	r26, 0x00	; 0
  b4:	b1 e0       	ldi	r27, 0x01	; 1
  b6:	ec e2       	ldi	r30, 0x2C	; 44
  b8:	f4 e0       	ldi	r31, 0x04	; 4
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
  bc:	05 90       	lpm	r0, Z+
  be:	0d 92       	st	X+, r0
  c0:	a0 32       	cpi	r26, 0x20	; 32
  c2:	b1 07       	cpc	r27, r17
  c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	a0 e2       	ldi	r26, 0x20	; 32
  ca:	b1 e0       	ldi	r27, 0x01	; 1
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
  ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
  d0:	a5 3c       	cpi	r26, 0xC5	; 197
  d2:	b2 07       	cpc	r27, r18
  d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
  d6:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  da:	0c 94 14 02 	jmp	0x428	; 0x428 <_exit>

000000de <__bad_interrupt>:
  de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize I2C (TWI)
    twi_init();
  e2:	0e 94 07 01 	call	0x20e	; 0x20e <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
  e6:	87 e6       	ldi	r24, 0x67	; 103
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 90 01 	call	0x320	; 0x320 <uart_init>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 33 ms and enable interrupt
    TIM1_overflow_33ms();
  ee:	e1 e8       	ldi	r30, 0x81	; 129
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	8a 7f       	andi	r24, 0xFA	; 250
  f6:	80 83       	st	Z, r24
  f8:	80 81       	ld	r24, Z
  fa:	82 60       	ori	r24, 0x02	; 2
  fc:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
  fe:	ef e6       	ldi	r30, 0x6F	; 111
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	81 60       	ori	r24, 0x01	; 1
 106:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 108:	78 94       	sei

    // Put strings to ringbuffer for transmitting via UART
    uart_puts("\r\nScan I2C-bus for devices:\r\n");
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	0e 94 be 01 	call	0x37c	; 0x37c <uart_puts>
 112:	ff cf       	rjmp	.-2      	; 0x112 <main+0x30>

00000114 <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and test I2C slave addresses 
 *           between 8 and 119.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	1f 93       	push	r17
 120:	2f 93       	push	r18
 122:	3f 93       	push	r19
 124:	4f 93       	push	r20
 126:	5f 93       	push	r21
 128:	6f 93       	push	r22
 12a:	7f 93       	push	r23
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
 130:	af 93       	push	r26
 132:	bf 93       	push	r27
 134:	ef 93       	push	r30
 136:	ff 93       	push	r31
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	00 d0       	rcall	.+0      	; 0x13e <__vector_13+0x2a>
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
    static state_t state = STATE_IDLE;  // Current state of the FSM
    static uint8_t addr = 7;            // I2C slave address
    uint8_t result = 1;                 // ACK result from the bus
    char uart_string[2] = "00"; // String for converting numbers by itoa()
 142:	80 e3       	ldi	r24, 0x30	; 48
 144:	90 e3       	ldi	r25, 0x30	; 48
 146:	9a 83       	std	Y+2, r25	; 0x02
 148:	89 83       	std	Y+1, r24	; 0x01

    // FSM
    switch (state)
 14a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state.1964>
 14e:	82 30       	cpi	r24, 0x02	; 2
 150:	d1 f0       	breq	.+52     	; 0x186 <__vector_13+0x72>
 152:	83 30       	cpi	r24, 0x03	; 3
 154:	51 f1       	breq	.+84     	; 0x1aa <__vector_13+0x96>
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	09 f0       	breq	.+2      	; 0x15c <__vector_13+0x48>
 15a:	40 c0       	rjmp	.+128    	; 0x1dc <__vector_13+0xc8>
    {
    // Increment I2C slave address
    case STATE_IDLE:
        addr++;
 15c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	98 0f       	add	r25, r24
 164:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
		if (addr > 7 && addr < 120)
 168:	87 50       	subi	r24, 0x07	; 7
 16a:	80 37       	cpi	r24, 0x70	; 112
 16c:	18 f4       	brcc	.+6      	; 0x174 <__vector_13+0x60>
			state = STATE_SEND;
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
		
		if (addr > 120)
 174:	99 37       	cpi	r25, 0x79	; 121
 176:	a8 f1       	brcs	.+106    	; 0x1e2 <__vector_13+0xce>
		{
			uart_puts_P("\r\nScan I2C-bus for devices:\r\n");	
 178:	85 e8       	ldi	r24, 0x85	; 133
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 cd 01 	call	0x39a	; 0x39a <uart_puts_p>
			addr = 0;
 180:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 184:	2e c0       	rjmp	.+92     	; 0x1e2 <__vector_13+0xce>
        // |      from Master       | from Slave |
        // +------------------------+------------+
        // | 7  6  5  4  3  2  1  0 |     ACK    |
        // |a6 a5 a4 a3 a2 a1 a0 R/W|   result   |
        // +------------------------+------------+
        result = twi_start((addr<<1) + TWI_WRITE);
 186:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 18a:	88 0f       	add	r24, r24
 18c:	0e 94 16 01 	call	0x22c	; 0x22c <twi_start>
 190:	18 2f       	mov	r17, r24
        twi_stop();
 192:	0e 94 34 01 	call	0x268	; 0x268 <twi_stop>
        /* Test result from I2C bus. If it is 0 then move to ACK state, 
         * otherwise move to IDLE */
		if (result == 0)
 196:	11 11       	cpse	r17, r1
 198:	04 c0       	rjmp	.+8      	; 0x1a2 <__vector_13+0x8e>
			state = STATE_ACK;
 19a:	83 e0       	ldi	r24, 0x03	; 3
 19c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
 1a0:	20 c0       	rjmp	.+64     	; 0x1e2 <__vector_13+0xce>
		else
			state = STATE_IDLE;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
 1a8:	1c c0       	rjmp	.+56     	; 0x1e2 <__vector_13+0xce>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1ae:	4a e0       	ldi	r20, 0x0A	; 10
 1b0:	be 01       	movw	r22, r28
 1b2:	6f 5f       	subi	r22, 0xFF	; 255
 1b4:	7f 4f       	sbci	r23, 0xFF	; 255
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 df 01 	call	0x3be	; 0x3be <__itoa_ncheck>

    // A module connected to the bus was found
    case STATE_ACK:
        // Send info about active I2C slave to UART and move to IDLE
		itoa(addr, uart_string, 10);
		uart_puts_P("Found device at address: ");
 1bc:	8b e6       	ldi	r24, 0x6B	; 107
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 cd 01 	call	0x39a	; 0x39a <uart_puts_p>
		uart_puts(uart_string);
 1c4:	ce 01       	movw	r24, r28
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	0e 94 be 01 	call	0x37c	; 0x37c <uart_puts>
		uart_puts_P("\r\n");
 1cc:	88 e6       	ldi	r24, 0x68	; 104
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 cd 01 	call	0x39a	; 0x39a <uart_puts_p>
		state = STATE_IDLE;
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
        break;
 1da:	03 c0       	rjmp	.+6      	; 0x1e2 <__vector_13+0xce>

    // If something unexpected happens then move to IDLE
    default:
        state = STATE_IDLE;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
        break;
    }
 1e2:	0f 90       	pop	r0
 1e4:	0f 90       	pop	r0
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	ff 91       	pop	r31
 1ec:	ef 91       	pop	r30
 1ee:	bf 91       	pop	r27
 1f0:	af 91       	pop	r26
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	7f 91       	pop	r23
 1f8:	6f 91       	pop	r22
 1fa:	5f 91       	pop	r21
 1fc:	4f 91       	pop	r20
 1fe:	3f 91       	pop	r19
 200:	2f 91       	pop	r18
 202:	1f 91       	pop	r17
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <twi_init>:
{
    TWCR = _BV(TWINT) | _BV(TWEN);

    while ((TWCR & _BV(TWINT)) == 0);
    return (TWDR);
}
 20e:	87 b1       	in	r24, 0x07	; 7
 210:	8f 7c       	andi	r24, 0xCF	; 207
 212:	87 b9       	out	0x07, r24	; 7
 214:	88 b1       	in	r24, 0x08	; 8
 216:	80 63       	ori	r24, 0x30	; 48
 218:	88 b9       	out	0x08, r24	; 8
 21a:	e9 eb       	ldi	r30, 0xB9	; 185
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	8c 7f       	andi	r24, 0xFC	; 252
 222:	80 83       	st	Z, r24
 224:	88 e9       	ldi	r24, 0x98	; 152
 226:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 22a:	08 95       	ret

0000022c <twi_start>:
 22c:	94 ea       	ldi	r25, 0xA4	; 164
 22e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 232:	ec eb       	ldi	r30, 0xBC	; 188
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	90 81       	ld	r25, Z
 238:	99 23       	and	r25, r25
 23a:	ec f7       	brge	.-6      	; 0x236 <twi_start+0xa>
 23c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 240:	84 e8       	ldi	r24, 0x84	; 132
 242:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 246:	ec eb       	ldi	r30, 0xBC	; 188
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	88 23       	and	r24, r24
 24e:	ec f7       	brge	.-6      	; 0x24a <twi_start+0x1e>
 250:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 254:	98 7f       	andi	r25, 0xF8	; 248
 256:	98 31       	cpi	r25, 0x18	; 24
 258:	29 f0       	breq	.+10     	; 0x264 <twi_start+0x38>
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 34       	cpi	r25, 0x40	; 64
 25e:	19 f4       	brne	.+6      	; 0x266 <twi_start+0x3a>
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	08 95       	ret
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	08 95       	ret

00000268 <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 268:	84 e9       	ldi	r24, 0x94	; 148
 26a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 26e:	08 95       	ret

00000270 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 270:	1f 92       	push	r1
 272:	0f 92       	push	r0
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	0f 92       	push	r0
 278:	11 24       	eor	r1, r1
 27a:	2f 93       	push	r18
 27c:	8f 93       	push	r24
 27e:	9f 93       	push	r25
 280:	ef 93       	push	r30
 282:	ff 93       	push	r31
 284:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 288:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 28c:	8c 71       	andi	r24, 0x1C	; 28
 28e:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <UART_RxHead>
 292:	ef 5f       	subi	r30, 0xFF	; 255
 294:	ef 71       	andi	r30, 0x1F	; 31
 296:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <UART_RxTail>
 29a:	e9 17       	cp	r30, r25
 29c:	39 f0       	breq	.+14     	; 0x2ac <__vector_18+0x3c>
 29e:	e0 93 22 01 	sts	0x0122, r30	; 0x800122 <UART_RxHead>
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	eb 5d       	subi	r30, 0xDB	; 219
 2a6:	fe 4f       	sbci	r31, 0xFE	; 254
 2a8:	20 83       	st	Z, r18
 2aa:	01 c0       	rjmp	.+2      	; 0x2ae <__vector_18+0x3e>
 2ac:	82 e0       	ldi	r24, 0x02	; 2
 2ae:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <__data_end>
 2b2:	89 2b       	or	r24, r25
 2b4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
 2b8:	ff 91       	pop	r31
 2ba:	ef 91       	pop	r30
 2bc:	9f 91       	pop	r25
 2be:	8f 91       	pop	r24
 2c0:	2f 91       	pop	r18
 2c2:	0f 90       	pop	r0
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	0f 90       	pop	r0
 2c8:	1f 90       	pop	r1
 2ca:	18 95       	reti

000002cc <__vector_19>:
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	8f 93       	push	r24
 2d8:	9f 93       	push	r25
 2da:	ef 93       	push	r30
 2dc:	ff 93       	push	r31
 2de:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <UART_TxHead>
 2e2:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <UART_TxTail>
 2e6:	98 17       	cp	r25, r24
 2e8:	69 f0       	breq	.+26     	; 0x304 <__vector_19+0x38>
 2ea:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <UART_TxTail>
 2ee:	ef 5f       	subi	r30, 0xFF	; 255
 2f0:	ef 77       	andi	r30, 0x7F	; 127
 2f2:	e0 93 23 01 	sts	0x0123, r30	; 0x800123 <UART_TxTail>
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	eb 5b       	subi	r30, 0xBB	; 187
 2fa:	fe 4f       	sbci	r31, 0xFE	; 254
 2fc:	80 81       	ld	r24, Z
 2fe:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 302:	05 c0       	rjmp	.+10     	; 0x30e <__vector_19+0x42>
 304:	e1 ec       	ldi	r30, 0xC1	; 193
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	80 81       	ld	r24, Z
 30a:	8f 7d       	andi	r24, 0xDF	; 223
 30c:	80 83       	st	Z, r24
 30e:	ff 91       	pop	r31
 310:	ef 91       	pop	r30
 312:	9f 91       	pop	r25
 314:	8f 91       	pop	r24
 316:	0f 90       	pop	r0
 318:	0f be       	out	0x3f, r0	; 63
 31a:	0f 90       	pop	r0
 31c:	1f 90       	pop	r1
 31e:	18 95       	reti

00000320 <uart_init>:
 320:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <UART_TxHead>
 324:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <UART_TxTail>
 328:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <UART_RxHead>
 32c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <UART_RxTail>
 330:	99 23       	and	r25, r25
 332:	1c f4       	brge	.+6      	; 0x33a <uart_init+0x1a>
 334:	22 e0       	ldi	r18, 0x02	; 2
 336:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 33a:	90 78       	andi	r25, 0x80	; 128
 33c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 340:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 344:	88 e9       	ldi	r24, 0x98	; 152
 346:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 34a:	86 e0       	ldi	r24, 0x06	; 6
 34c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 350:	08 95       	ret

00000352 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 352:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <UART_TxHead>
 356:	2f 5f       	subi	r18, 0xFF	; 255
 358:	2f 77       	andi	r18, 0x7F	; 127

    while (tmphead == UART_TxTail)
 35a:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <UART_TxTail>
 35e:	29 17       	cp	r18, r25
 360:	e1 f3       	breq	.-8      	; 0x35a <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 362:	e2 2f       	mov	r30, r18
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	eb 5b       	subi	r30, 0xBB	; 187
 368:	fe 4f       	sbci	r31, 0xFE	; 254
 36a:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 36c:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 370:	e1 ec       	ldi	r30, 0xC1	; 193
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	80 62       	ori	r24, 0x20	; 32
 378:	80 83       	st	Z, r24
 37a:	08 95       	ret

0000037c <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	ec 01       	movw	r28, r24
    while (*s)
 382:	88 81       	ld	r24, Y
 384:	88 23       	and	r24, r24
 386:	31 f0       	breq	.+12     	; 0x394 <uart_puts+0x18>
 388:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 38a:	0e 94 a9 01 	call	0x352	; 0x352 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 38e:	89 91       	ld	r24, Y+
 390:	81 11       	cpse	r24, r1
 392:	fb cf       	rjmp	.-10     	; 0x38a <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	08 95       	ret

0000039a <uart_puts_p>:
 * Purpose:  transmit string from program memory to UART
 * Input:    program memory string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s)
{
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
 39e:	ec 01       	movw	r28, r24
 3a0:	21 96       	adiw	r28, 0x01	; 1
 3a2:	fc 01       	movw	r30, r24
 3a4:	84 91       	lpm	r24, Z
 3a6:	88 23       	and	r24, r24
 3a8:	39 f0       	breq	.+14     	; 0x3b8 <uart_puts_p+0x1e>
        uart_putc(c);
 3aa:	0e 94 a9 01 	call	0x352	; 0x352 <uart_putc>
 **************************************************************************/
void uart_puts_p(const char *progmem_s)
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
 3ae:	fe 01       	movw	r30, r28
 3b0:	84 91       	lpm	r24, Z
 3b2:	21 96       	adiw	r28, 0x01	; 1
 3b4:	81 11       	cpse	r24, r1
 3b6:	f9 cf       	rjmp	.-14     	; 0x3aa <uart_puts_p+0x10>
        uart_putc(c);
}/* uart_puts_p */
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	08 95       	ret

000003be <__itoa_ncheck>:
 3be:	bb 27       	eor	r27, r27
 3c0:	4a 30       	cpi	r20, 0x0A	; 10
 3c2:	31 f4       	brne	.+12     	; 0x3d0 <__itoa_ncheck+0x12>
 3c4:	99 23       	and	r25, r25
 3c6:	22 f4       	brpl	.+8      	; 0x3d0 <__itoa_ncheck+0x12>
 3c8:	bd e2       	ldi	r27, 0x2D	; 45
 3ca:	90 95       	com	r25
 3cc:	81 95       	neg	r24
 3ce:	9f 4f       	sbci	r25, 0xFF	; 255
 3d0:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__utoa_common>

000003d4 <__utoa_ncheck>:
 3d4:	bb 27       	eor	r27, r27

000003d6 <__utoa_common>:
 3d6:	fb 01       	movw	r30, r22
 3d8:	55 27       	eor	r21, r21
 3da:	aa 27       	eor	r26, r26
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	aa 1f       	adc	r26, r26
 3e2:	a4 17       	cp	r26, r20
 3e4:	10 f0       	brcs	.+4      	; 0x3ea <__utoa_common+0x14>
 3e6:	a4 1b       	sub	r26, r20
 3e8:	83 95       	inc	r24
 3ea:	50 51       	subi	r21, 0x10	; 16
 3ec:	b9 f7       	brne	.-18     	; 0x3dc <__utoa_common+0x6>
 3ee:	a0 5d       	subi	r26, 0xD0	; 208
 3f0:	aa 33       	cpi	r26, 0x3A	; 58
 3f2:	08 f0       	brcs	.+2      	; 0x3f6 <__utoa_common+0x20>
 3f4:	a9 5d       	subi	r26, 0xD9	; 217
 3f6:	a1 93       	st	Z+, r26
 3f8:	00 97       	sbiw	r24, 0x00	; 0
 3fa:	79 f7       	brne	.-34     	; 0x3da <__utoa_common+0x4>
 3fc:	b1 11       	cpse	r27, r1
 3fe:	b1 93       	st	Z+, r27
 400:	11 92       	st	Z+, r1
 402:	cb 01       	movw	r24, r22
 404:	0c 94 04 02 	jmp	0x408	; 0x408 <strrev>

00000408 <strrev>:
 408:	dc 01       	movw	r26, r24
 40a:	fc 01       	movw	r30, r24
 40c:	67 2f       	mov	r22, r23
 40e:	71 91       	ld	r23, Z+
 410:	77 23       	and	r23, r23
 412:	e1 f7       	brne	.-8      	; 0x40c <strrev+0x4>
 414:	32 97       	sbiw	r30, 0x02	; 2
 416:	04 c0       	rjmp	.+8      	; 0x420 <strrev+0x18>
 418:	7c 91       	ld	r23, X
 41a:	6d 93       	st	X+, r22
 41c:	70 83       	st	Z, r23
 41e:	62 91       	ld	r22, -Z
 420:	ae 17       	cp	r26, r30
 422:	bf 07       	cpc	r27, r31
 424:	c8 f3       	brcs	.-14     	; 0x418 <strrev+0x10>
 426:	08 95       	ret

00000428 <_exit>:
 428:	f8 94       	cli

0000042a <__stop_program>:
 42a:	ff cf       	rjmp	.-2      	; 0x42a <__stop_program>
