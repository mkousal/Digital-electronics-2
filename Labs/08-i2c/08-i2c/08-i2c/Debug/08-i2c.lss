
08-i2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  0000041e  000004b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000041e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  00800136  00800136  000004e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000518  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e55  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098f  00000000  00000000  0000146d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006f1  00000000  00000000  00001dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  000024f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000577  00000000  00000000  000026d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000522  00000000  00000000  00002c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000316d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_18>
  4c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e1       	ldi	r30, 0x1E	; 30
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 33       	cpi	r26, 0x36	; 54
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e3       	ldi	r26, 0x36	; 54
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 37       	cpi	r26, 0x7C	; 124
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 0d 02 	jmp	0x41a	; 0x41a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize I2C (TWI)
    twi_init();
  a6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 9b 01 	call	0x336	; 0x336 <uart_init>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 33 ms and enable interrupt
    TIM1_overflow_33ms();
  b2:	e1 e8       	ldi	r30, 0x81	; 129
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8a 7f       	andi	r24, 0xFA	; 250
  ba:	80 83       	st	Z, r24
  bc:	80 81       	ld	r24, Z
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
  c2:	ef e6       	ldi	r30, 0x6F	; 111
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
  cc:	78 94       	sei

    // Put strings to ringbuffer for transmitting via UART
    uart_puts("\r\nTemperature reader\r\n");
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 c9 01 	call	0x392	; 0x392 <uart_puts>

    // Infinite loop
    while (1)
    {
		uart_puts("ss\r\n");
  d6:	88 e1       	ldi	r24, 0x18	; 24
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	0e 94 c9 01 	call	0x392	; 0x392 <uart_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	83 ec       	ldi	r24, 0xC3	; 195
  e2:	99 e0       	ldi	r25, 0x09	; 9
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x3e>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x48>
  ee:	00 00       	nop
  f0:	f2 cf       	rjmp	.-28     	; 0xd6 <main+0x30>

000000f2 <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and test I2C slave addresses 
 *           between 8 and 119.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	1f 93       	push	r17
  fe:	2f 93       	push	r18
 100:	3f 93       	push	r19
 102:	4f 93       	push	r20
 104:	5f 93       	push	r21
 106:	6f 93       	push	r22
 108:	7f 93       	push	r23
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
 10e:	af 93       	push	r26
 110:	bf 93       	push	r27
 112:	ef 93       	push	r30
 114:	ff 93       	push	r31
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	00 d0       	rcall	.+0      	; 0x11c <__vector_13+0x2a>
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
    static state_t state = STATE_IDLE;  // Current state of the FSM
    static uint8_t addr = 92;            // I2C slave address
    uint8_t result = 1;                 // ACK result from the bus
    char uart_string[2] = "00"; // String for converting numbers by itoa()
 120:	80 e3       	ldi	r24, 0x30	; 48
 122:	90 e3       	ldi	r25, 0x30	; 48
 124:	9a 83       	std	Y+2, r25	; 0x02
 126:	89 83       	std	Y+1, r24	; 0x01
	static uint8_t cnt = 0;

    // FSM
    switch (state)
 128:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 12c:	82 30       	cpi	r24, 0x02	; 2
 12e:	d1 f0       	breq	.+52     	; 0x164 <__vector_13+0x72>
 130:	83 30       	cpi	r24, 0x03	; 3
 132:	69 f1       	breq	.+90     	; 0x18e <__vector_13+0x9c>
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	09 f0       	breq	.+2      	; 0x13a <__vector_13+0x48>
 138:	46 c0       	rjmp	.+140    	; 0x1c6 <__vector_13+0xd4>
    {
    // Increment I2C slave address
    case STATE_IDLE:
		cnt++;
 13a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 13e:	8f 5f       	subi	r24, 0xFF	; 255
 140:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
		if (cnt == 50)
 144:	82 33       	cpi	r24, 0x32	; 50
 146:	51 f4       	brne	.+20     	; 0x15c <__vector_13+0x6a>
		{
			cnt = 0;
 148:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end>
			state = STATE_SEND;
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			uart_puts("->send");
 152:	8d e1       	ldi	r24, 0x1D	; 29
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	0e 94 c9 01 	call	0x392	; 0x392 <uart_puts>
 15a:	38 c0       	rjmp	.+112    	; 0x1cc <__vector_13+0xda>
		}
		else
			state = STATE_IDLE;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 162:	34 c0       	rjmp	.+104    	; 0x1cc <__vector_13+0xda>
        // |      from Master       | from Slave |
        // +------------------------+------------+
        // | 7  6  5  4  3  2  1  0 |     ACK    |
        // |a6 a5 a4 a3 a2 a1 a0 R/W|   result   |
        // +------------------------+------------+
        result = twi_start((addr<<1) + TWI_WRITE);
 164:	88 eb       	ldi	r24, 0xB8	; 184
 166:	0e 94 0b 01 	call	0x216	; 0x216 <twi_start>
//         twi_stop();
        /* Test result from I2C bus. If it is 0 then move to ACK state, 
         * otherwise move to IDLE */
		if (result == 0)
 16a:	81 11       	cpse	r24, r1
 16c:	08 c0       	rjmp	.+16     	; 0x17e <__vector_13+0x8c>
		{
			state = STATE_ACK;
 16e:	83 e0       	ldi	r24, 0x03	; 3
 170:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			uart_puts("->ack");
 174:	84 e2       	ldi	r24, 0x24	; 36
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	0e 94 c9 01 	call	0x392	; 0x392 <uart_puts>
 17c:	27 c0       	rjmp	.+78     	; 0x1cc <__vector_13+0xda>
		}
		else
		{
			state = STATE_IDLE;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			uart_puts("->idle");
 184:	8a e2       	ldi	r24, 0x2A	; 42
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	0e 94 c9 01 	call	0x392	; 0x392 <uart_puts>
 18c:	1f c0       	rjmp	.+62     	; 0x1cc <__vector_13+0xda>
        break;

    // A module connected to the bus was found
    case STATE_ACK:
        // Send info about active I2C slave to UART and move to IDLE
		uart_puts("twi");
 18e:	81 e3       	ldi	r24, 0x31	; 49
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	0e 94 c9 01 	call	0x392	; 0x392 <uart_puts>
		twi_write(0);
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	0e 94 29 01 	call	0x252	; 0x252 <twi_write>
		uint8_t res1 = twi_read_nack();
 19c:	0e 94 34 01 	call	0x268	; 0x268 <twi_read_nack>
 1a0:	18 2f       	mov	r17, r24
		twi_stop();
 1a2:	0e 94 3f 01 	call	0x27e	; 0x27e <twi_stop>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1a6:	4a e0       	ldi	r20, 0x0A	; 10
 1a8:	be 01       	movw	r22, r28
 1aa:	6f 5f       	subi	r22, 0xFF	; 255
 1ac:	7f 4f       	sbci	r23, 0xFF	; 255
 1ae:	81 2f       	mov	r24, r17
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <__itoa_ncheck>
		itoa(res1, uart_string, 10);
		uart_puts(uart_string);
 1b6:	ce 01       	movw	r24, r28
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	0e 94 c9 01 	call	0x392	; 0x392 <uart_puts>
		state = STATE_IDLE;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        break;
 1c4:	03 c0       	rjmp	.+6      	; 0x1cc <__vector_13+0xda>

    // If something unexpected happens then move to IDLE
    default:
        state = STATE_IDLE;
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        break;
    }
 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	ff 91       	pop	r31
 1d6:	ef 91       	pop	r30
 1d8:	bf 91       	pop	r27
 1da:	af 91       	pop	r26
 1dc:	9f 91       	pop	r25
 1de:	8f 91       	pop	r24
 1e0:	7f 91       	pop	r23
 1e2:	6f 91       	pop	r22
 1e4:	5f 91       	pop	r21
 1e6:	4f 91       	pop	r20
 1e8:	3f 91       	pop	r19
 1ea:	2f 91       	pop	r18
 1ec:	1f 91       	pop	r17
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <twi_init>:
{
    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);

    while ((TWCR & _BV(TWINT)) == 0);
    return (TWDR);
}
 1f8:	87 b1       	in	r24, 0x07	; 7
 1fa:	8f 7c       	andi	r24, 0xCF	; 207
 1fc:	87 b9       	out	0x07, r24	; 7
 1fe:	88 b1       	in	r24, 0x08	; 8
 200:	80 63       	ori	r24, 0x30	; 48
 202:	88 b9       	out	0x08, r24	; 8
 204:	e9 eb       	ldi	r30, 0xB9	; 185
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	8c 7f       	andi	r24, 0xFC	; 252
 20c:	80 83       	st	Z, r24
 20e:	88 e9       	ldi	r24, 0x98	; 152
 210:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 214:	08 95       	ret

00000216 <twi_start>:
 216:	94 ea       	ldi	r25, 0xA4	; 164
 218:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 21c:	ec eb       	ldi	r30, 0xBC	; 188
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	90 81       	ld	r25, Z
 222:	99 23       	and	r25, r25
 224:	ec f7       	brge	.-6      	; 0x220 <twi_start+0xa>
 226:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 22a:	84 e8       	ldi	r24, 0x84	; 132
 22c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 230:	ec eb       	ldi	r30, 0xBC	; 188
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	88 23       	and	r24, r24
 238:	ec f7       	brge	.-6      	; 0x234 <twi_start+0x1e>
 23a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 23e:	98 7f       	andi	r25, 0xF8	; 248
 240:	98 31       	cpi	r25, 0x18	; 24
 242:	29 f0       	breq	.+10     	; 0x24e <twi_start+0x38>
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 34       	cpi	r25, 0x40	; 64
 248:	19 f4       	brne	.+6      	; 0x250 <twi_start+0x3a>
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	08 95       	ret
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	08 95       	ret

00000252 <twi_write>:
 252:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 256:	84 e8       	ldi	r24, 0x84	; 132
 258:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 25c:	ec eb       	ldi	r30, 0xBC	; 188
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	88 23       	and	r24, r24
 264:	ec f7       	brge	.-6      	; 0x260 <twi_write+0xe>
 266:	08 95       	ret

00000268 <twi_read_nack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by NACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_nack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN);
 268:	84 e8       	ldi	r24, 0x84	; 132
 26a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

    while ((TWCR & _BV(TWINT)) == 0);
 26e:	ec eb       	ldi	r30, 0xBC	; 188
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	88 23       	and	r24, r24
 276:	ec f7       	brge	.-6      	; 0x272 <twi_read_nack+0xa>
    return (TWDR);
 278:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}
 27c:	08 95       	ret

0000027e <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 27e:	84 e9       	ldi	r24, 0x94	; 148
 280:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 284:	08 95       	ret

00000286 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 286:	1f 92       	push	r1
 288:	0f 92       	push	r0
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	0f 92       	push	r0
 28e:	11 24       	eor	r1, r1
 290:	2f 93       	push	r18
 292:	8f 93       	push	r24
 294:	9f 93       	push	r25
 296:	ef 93       	push	r30
 298:	ff 93       	push	r31
 29a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 29e:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 2a2:	8c 71       	andi	r24, 0x1C	; 28
 2a4:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <UART_RxHead>
 2a8:	ef 5f       	subi	r30, 0xFF	; 255
 2aa:	ef 71       	andi	r30, 0x1F	; 31
 2ac:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <UART_RxTail>
 2b0:	e9 17       	cp	r30, r25
 2b2:	39 f0       	breq	.+14     	; 0x2c2 <__vector_18+0x3c>
 2b4:	e0 93 39 01 	sts	0x0139, r30	; 0x800139 <UART_RxHead>
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	e4 5c       	subi	r30, 0xC4	; 196
 2bc:	fe 4f       	sbci	r31, 0xFE	; 254
 2be:	20 83       	st	Z, r18
 2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <__vector_18+0x3e>
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <UART_LastRxError>
 2c8:	89 2b       	or	r24, r25
 2ca:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <UART_LastRxError>
 2ce:	ff 91       	pop	r31
 2d0:	ef 91       	pop	r30
 2d2:	9f 91       	pop	r25
 2d4:	8f 91       	pop	r24
 2d6:	2f 91       	pop	r18
 2d8:	0f 90       	pop	r0
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	0f 90       	pop	r0
 2de:	1f 90       	pop	r1
 2e0:	18 95       	reti

000002e2 <__vector_19>:
 2e2:	1f 92       	push	r1
 2e4:	0f 92       	push	r0
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	0f 92       	push	r0
 2ea:	11 24       	eor	r1, r1
 2ec:	8f 93       	push	r24
 2ee:	9f 93       	push	r25
 2f0:	ef 93       	push	r30
 2f2:	ff 93       	push	r31
 2f4:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <UART_TxHead>
 2f8:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <UART_TxTail>
 2fc:	98 17       	cp	r25, r24
 2fe:	69 f0       	breq	.+26     	; 0x31a <__vector_19+0x38>
 300:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <UART_TxTail>
 304:	ef 5f       	subi	r30, 0xFF	; 255
 306:	ef 71       	andi	r30, 0x1F	; 31
 308:	e0 93 3a 01 	sts	0x013A, r30	; 0x80013a <UART_TxTail>
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	e4 5a       	subi	r30, 0xA4	; 164
 310:	fe 4f       	sbci	r31, 0xFE	; 254
 312:	80 81       	ld	r24, Z
 314:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 318:	05 c0       	rjmp	.+10     	; 0x324 <__vector_19+0x42>
 31a:	e1 ec       	ldi	r30, 0xC1	; 193
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	8f 7d       	andi	r24, 0xDF	; 223
 322:	80 83       	st	Z, r24
 324:	ff 91       	pop	r31
 326:	ef 91       	pop	r30
 328:	9f 91       	pop	r25
 32a:	8f 91       	pop	r24
 32c:	0f 90       	pop	r0
 32e:	0f be       	out	0x3f, r0	; 63
 330:	0f 90       	pop	r0
 332:	1f 90       	pop	r1
 334:	18 95       	reti

00000336 <uart_init>:
 336:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <UART_TxHead>
 33a:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <UART_TxTail>
 33e:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <UART_RxHead>
 342:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <UART_RxTail>
 346:	99 23       	and	r25, r25
 348:	1c f4       	brge	.+6      	; 0x350 <uart_init+0x1a>
 34a:	22 e0       	ldi	r18, 0x02	; 2
 34c:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 350:	90 78       	andi	r25, 0x80	; 128
 352:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 356:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 35a:	88 e9       	ldi	r24, 0x98	; 152
 35c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 360:	86 e0       	ldi	r24, 0x06	; 6
 362:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 366:	08 95       	ret

00000368 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 368:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <UART_TxHead>
 36c:	2f 5f       	subi	r18, 0xFF	; 255
 36e:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 370:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <UART_TxTail>
 374:	29 17       	cp	r18, r25
 376:	e1 f3       	breq	.-8      	; 0x370 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 378:	e2 2f       	mov	r30, r18
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	e4 5a       	subi	r30, 0xA4	; 164
 37e:	fe 4f       	sbci	r31, 0xFE	; 254
 380:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 382:	20 93 3b 01 	sts	0x013B, r18	; 0x80013b <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 386:	e1 ec       	ldi	r30, 0xC1	; 193
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	80 62       	ori	r24, 0x20	; 32
 38e:	80 83       	st	Z, r24
 390:	08 95       	ret

00000392 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	ec 01       	movw	r28, r24
    while (*s)
 398:	88 81       	ld	r24, Y
 39a:	88 23       	and	r24, r24
 39c:	31 f0       	breq	.+12     	; 0x3aa <uart_puts+0x18>
 39e:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 3a0:	0e 94 b4 01 	call	0x368	; 0x368 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 3a4:	89 91       	ld	r24, Y+
 3a6:	81 11       	cpse	r24, r1
 3a8:	fb cf       	rjmp	.-10     	; 0x3a0 <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <__itoa_ncheck>:
 3b0:	bb 27       	eor	r27, r27
 3b2:	4a 30       	cpi	r20, 0x0A	; 10
 3b4:	31 f4       	brne	.+12     	; 0x3c2 <__itoa_ncheck+0x12>
 3b6:	99 23       	and	r25, r25
 3b8:	22 f4       	brpl	.+8      	; 0x3c2 <__itoa_ncheck+0x12>
 3ba:	bd e2       	ldi	r27, 0x2D	; 45
 3bc:	90 95       	com	r25
 3be:	81 95       	neg	r24
 3c0:	9f 4f       	sbci	r25, 0xFF	; 255
 3c2:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__utoa_common>

000003c6 <__utoa_ncheck>:
 3c6:	bb 27       	eor	r27, r27

000003c8 <__utoa_common>:
 3c8:	fb 01       	movw	r30, r22
 3ca:	55 27       	eor	r21, r21
 3cc:	aa 27       	eor	r26, r26
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	aa 1f       	adc	r26, r26
 3d4:	a4 17       	cp	r26, r20
 3d6:	10 f0       	brcs	.+4      	; 0x3dc <__utoa_common+0x14>
 3d8:	a4 1b       	sub	r26, r20
 3da:	83 95       	inc	r24
 3dc:	50 51       	subi	r21, 0x10	; 16
 3de:	b9 f7       	brne	.-18     	; 0x3ce <__utoa_common+0x6>
 3e0:	a0 5d       	subi	r26, 0xD0	; 208
 3e2:	aa 33       	cpi	r26, 0x3A	; 58
 3e4:	08 f0       	brcs	.+2      	; 0x3e8 <__utoa_common+0x20>
 3e6:	a9 5d       	subi	r26, 0xD9	; 217
 3e8:	a1 93       	st	Z+, r26
 3ea:	00 97       	sbiw	r24, 0x00	; 0
 3ec:	79 f7       	brne	.-34     	; 0x3cc <__utoa_common+0x4>
 3ee:	b1 11       	cpse	r27, r1
 3f0:	b1 93       	st	Z+, r27
 3f2:	11 92       	st	Z+, r1
 3f4:	cb 01       	movw	r24, r22
 3f6:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <strrev>

000003fa <strrev>:
 3fa:	dc 01       	movw	r26, r24
 3fc:	fc 01       	movw	r30, r24
 3fe:	67 2f       	mov	r22, r23
 400:	71 91       	ld	r23, Z+
 402:	77 23       	and	r23, r23
 404:	e1 f7       	brne	.-8      	; 0x3fe <strrev+0x4>
 406:	32 97       	sbiw	r30, 0x02	; 2
 408:	04 c0       	rjmp	.+8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 40a:	7c 91       	ld	r23, X
 40c:	6d 93       	st	X+, r22
 40e:	70 83       	st	Z, r23
 410:	62 91       	ld	r22, -Z
 412:	ae 17       	cp	r26, r30
 414:	bf 07       	cpc	r27, r31
 416:	c8 f3       	brcs	.-14     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 418:	08 95       	ret

0000041a <_exit>:
 41a:	f8 94       	cli

0000041c <__stop_program>:
 41c:	ff cf       	rjmp	.-2      	; 0x41c <__stop_program>
