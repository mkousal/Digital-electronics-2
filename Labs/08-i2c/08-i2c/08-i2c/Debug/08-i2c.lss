
08-i2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000005c4  00000658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a6  00800120  00800120  00000678  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001020  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000981  00000000  00000000  000017c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000752  00000000  00000000  00002149  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  0000289c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000586  00000000  00000000  00002a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000061e  00000000  00000000  00003006  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003624  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b4 00 	jmp	0x168	; 0x168 <__ctors_end>
   4:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
   8:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
   c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  10:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  14:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  18:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  1c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  20:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  24:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  28:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  2c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  30:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  34:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__vector_13>
  38:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  3c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  40:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  44:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  48:	0c 94 04 02 	jmp	0x408	; 0x408 <__vector_18>
  4c:	0c 94 32 02 	jmp	0x464	; 0x464 <__vector_19>
  50:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  54:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  58:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  5c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  60:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  64:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	20 00       	.word	0x0020	; ????

0000006a <__c.2121>:
  6a:	2e 3a 20 00                                         .: .

0000006e <__c.2119>:
  6e:	2d 2d 0d 0a 30 78 00                                --..0x.

00000075 <__c.2117>:
  75:	2d 2d 20 00                                         -- .

00000079 <__c.2110>:
  79:	30 78 30 2e 3a 20 52 41 20 52 41 20 52 41 20 52     0x0.: RA RA RA R
  89:	41 20 52 41 20 52 41 20 52 41 20 52 41 20 00        A RA RA RA RA .

00000098 <__c.2108>:
  98:	0d 0a 20 20 20 20 20 20 2e 30 20 2e 31 20 2e 32     ..      .0 .1 .2
  a8:	20 2e 33 20 2e 34 20 2e 35 20 2e 36 20 2e 37 20      .3 .4 .5 .6 .7 
  b8:	2e 38 20 2e 39 20 2e 61 20 2e 62 20 2e 63 20 2e     .8 .9 .a .b .c .
  c8:	64 20 2e 65 20 2e 66 0d 0a 00                       d .e .f...

000000d2 <__c.2106>:
  d2:	0d 0a 00                                            ...

000000d5 <__c.2104>:
  d5:	4e 75 6d 62 65 72 20 6f 66 20 64 65 74 65 63 74     Number of detect
  e5:	65 64 20 64 65 76 69 63 65 73 3a 20 00              ed devices: .

000000f2 <__c.2102>:
  f2:	52 41 20 52 41 20 52 41 20 52 41 20 52 41 20 52     RA RA RA RA RA R
 102:	41 20 52 41 20 52 41 0d 0a 0d 0a 00                 A RA RA.....

0000010e <__c.2087>:
 10e:	30 78 30 2e 3a 20 52 41 20 52 41 20 52 41 20 52     0x0.: RA RA RA R
 11e:	41 20 52 41 20 52 41 20 52 41 20 52 41 20 00        A RA RA RA RA .

0000012d <__c.2085>:
 12d:	0d 0a 20 20 20 20 20 20 2e 30 20 2e 31 20 2e 32     ..      .0 .1 .2
 13d:	20 2e 33 20 2e 34 20 2e 35 20 2e 36 20 2e 37 20      .3 .4 .5 .6 .7 
 14d:	2e 38 20 2e 39 20 2e 61 20 2e 62 20 2e 63 20 2e     .8 .9 .a .b .c .
 15d:	64 20 2e 65 20 2e 66 0d 0a 00 00                    d .e .f....

00000168 <__ctors_end>:
 168:	11 24       	eor	r1, r1
 16a:	1f be       	out	0x3f, r1	; 63
 16c:	cf ef       	ldi	r28, 0xFF	; 255
 16e:	d8 e0       	ldi	r29, 0x08	; 8
 170:	de bf       	out	0x3e, r29	; 62
 172:	cd bf       	out	0x3d, r28	; 61

00000174 <__do_copy_data>:
 174:	11 e0       	ldi	r17, 0x01	; 1
 176:	a0 e0       	ldi	r26, 0x00	; 0
 178:	b1 e0       	ldi	r27, 0x01	; 1
 17a:	e4 ec       	ldi	r30, 0xC4	; 196
 17c:	f5 e0       	ldi	r31, 0x05	; 5
 17e:	02 c0       	rjmp	.+4      	; 0x184 <__do_copy_data+0x10>
 180:	05 90       	lpm	r0, Z+
 182:	0d 92       	st	X+, r0
 184:	a0 32       	cpi	r26, 0x20	; 32
 186:	b1 07       	cpc	r27, r17
 188:	d9 f7       	brne	.-10     	; 0x180 <__do_copy_data+0xc>

0000018a <__do_clear_bss>:
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	a0 e2       	ldi	r26, 0x20	; 32
 18e:	b1 e0       	ldi	r27, 0x01	; 1
 190:	01 c0       	rjmp	.+2      	; 0x194 <.do_clear_bss_start>

00000192 <.do_clear_bss_loop>:
 192:	1d 92       	st	X+, r1

00000194 <.do_clear_bss_start>:
 194:	a6 3c       	cpi	r26, 0xC6	; 198
 196:	b2 07       	cpc	r27, r18
 198:	e1 f7       	brne	.-8      	; 0x192 <.do_clear_bss_loop>
 19a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <main>
 19e:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <_exit>

000001a2 <__bad_interrupt>:
 1a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a6 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize I2C (TWI)
    twi_init();
 1a6:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
 1aa:	87 e6       	ldi	r24, 0x67	; 103
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <uart_init>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 33 ms and enable interrupt
    TIM1_overflow_33ms();
 1b2:	e1 e8       	ldi	r30, 0x81	; 129
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	8a 7f       	andi	r24, 0xFA	; 250
 1ba:	80 83       	st	Z, r24
 1bc:	80 81       	ld	r24, Z
 1be:	82 60       	ori	r24, 0x02	; 2
 1c0:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 1c2:	ef e6       	ldi	r30, 0x6F	; 111
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	81 60       	ori	r24, 0x01	; 1
 1ca:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 1cc:	78 94       	sei

    // Put strings to ringbuffer for transmitting via UART
    uart_puts("\r\nScan I2C-bus for devices:\r\n");
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	0e 94 8a 02 	call	0x514	; 0x514 <uart_puts>
	uart_puts_P("\r\n      .0 .1 .2 .3 .4 .5 .6 .7 .8 .9 .a .b .c .d .e .f\r\n");
 1d6:	8d e2       	ldi	r24, 0x2D	; 45
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	0e 94 99 02 	call	0x532	; 0x532 <uart_puts_p>
	uart_puts_P("0x0.: RA RA RA RA RA RA RA RA ");
 1de:	8e e0       	ldi	r24, 0x0E	; 14
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 99 02 	call	0x532	; 0x532 <uart_puts_p>
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <main+0x40>

000001e8 <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and test I2C slave addresses 
 *           between 8 and 119.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 1e8:	1f 92       	push	r1
 1ea:	0f 92       	push	r0
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	0f 92       	push	r0
 1f0:	11 24       	eor	r1, r1
 1f2:	1f 93       	push	r17
 1f4:	2f 93       	push	r18
 1f6:	3f 93       	push	r19
 1f8:	4f 93       	push	r20
 1fa:	5f 93       	push	r21
 1fc:	6f 93       	push	r22
 1fe:	7f 93       	push	r23
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
 204:	af 93       	push	r26
 206:	bf 93       	push	r27
 208:	ef 93       	push	r30
 20a:	ff 93       	push	r31
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	cd b7       	in	r28, 0x3d	; 61
 212:	de b7       	in	r29, 0x3e	; 62
 214:	25 97       	sbiw	r28, 0x05	; 5
 216:	de bf       	out	0x3e, r29	; 62
 218:	cd bf       	out	0x3d, r28	; 61
    static state_t state = STATE_IDLE;  // Current state of the FSM
    static uint8_t addr = 7;            // I2C slave address
    uint8_t result = 1;                 // ACK result from the bus
    char uart_string[2] = "00"; // String for converting numbers by itoa()
 21a:	80 e3       	ldi	r24, 0x30	; 48
 21c:	90 e3       	ldi	r25, 0x30	; 48
 21e:	9a 83       	std	Y+2, r25	; 0x02
 220:	89 83       	std	Y+1, r24	; 0x01
	static uint8_t cnt = 0;	// Counter of detected devices
	
    // FSM
    switch (state)
 222:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state.2095>
 226:	82 30       	cpi	r24, 0x02	; 2
 228:	09 f4       	brne	.+2      	; 0x22c <__vector_13+0x44>
 22a:	50 c0       	rjmp	.+160    	; 0x2cc <__vector_13+0xe4>
 22c:	83 30       	cpi	r24, 0x03	; 3
 22e:	09 f4       	brne	.+2      	; 0x232 <__vector_13+0x4a>
 230:	84 c0       	rjmp	.+264    	; 0x33a <__vector_13+0x152>
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	09 f0       	breq	.+2      	; 0x238 <__vector_13+0x50>
 236:	9b c0       	rjmp	.+310    	; 0x36e <__vector_13+0x186>
    {
    // Increment I2C slave address
    case STATE_IDLE:
        addr++;
 238:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 23c:	8f 5f       	subi	r24, 0xFF	; 255
 23e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		if (addr == 120)
 242:	88 37       	cpi	r24, 0x78	; 120
 244:	c9 f5       	brne	.+114    	; 0x2b8 <__vector_13+0xd0>
		{
			char cnt_str[3] = "000";
 246:	80 e3       	ldi	r24, 0x30	; 48
 248:	90 e3       	ldi	r25, 0x30	; 48
 24a:	9c 83       	std	Y+4, r25	; 0x04
 24c:	8b 83       	std	Y+3, r24	; 0x03
 24e:	80 e3       	ldi	r24, 0x30	; 48
 250:	8d 83       	std	Y+5, r24	; 0x05
			uart_puts_P("RA RA RA RA RA RA RA RA\r\n\r\n");
 252:	82 ef       	ldi	r24, 0xF2	; 242
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 99 02 	call	0x532	; 0x532 <uart_puts_p>
			uart_puts_P("Number of detected devices: ");
 25a:	85 ed       	ldi	r24, 0xD5	; 213
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 99 02 	call	0x532	; 0x532 <uart_puts_p>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 262:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 266:	4a e0       	ldi	r20, 0x0A	; 10
 268:	be 01       	movw	r22, r28
 26a:	6d 5f       	subi	r22, 0xFD	; 253
 26c:	7f 4f       	sbci	r23, 0xFF	; 255
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 ab 02 	call	0x556	; 0x556 <__itoa_ncheck>
			itoa(cnt, cnt_str, 10);
			uart_puts(cnt_str);
 274:	ce 01       	movw	r24, r28
 276:	03 96       	adiw	r24, 0x03	; 3
 278:	0e 94 8a 02 	call	0x514	; 0x514 <uart_puts>
			uart_puts_P("\r\n");
 27c:	82 ed       	ldi	r24, 0xD2	; 210
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 99 02 	call	0x532	; 0x532 <uart_puts_p>
			cnt = 0;
 284:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
			addr = 7;
 288:	87 e0       	ldi	r24, 0x07	; 7
 28a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			uart_puts("\r\nScan I2C-bus for devices:\r\n");
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	0e 94 8a 02 	call	0x514	; 0x514 <uart_puts>
			uart_puts_P("\r\n      .0 .1 .2 .3 .4 .5 .6 .7 .8 .9 .a .b .c .d .e .f\r\n");
 296:	88 e9       	ldi	r24, 0x98	; 152
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 99 02 	call	0x532	; 0x532 <uart_puts_p>
			uart_puts_P("0x0.: RA RA RA RA RA RA RA RA ");
 29e:	89 e7       	ldi	r24, 0x79	; 121
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 99 02 	call	0x532	; 0x532 <uart_puts_p>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a6:	2f ef       	ldi	r18, 0xFF	; 255
 2a8:	89 e6       	ldi	r24, 0x69	; 105
 2aa:	98 e1       	ldi	r25, 0x18	; 24
 2ac:	21 50       	subi	r18, 0x01	; 1
 2ae:	80 40       	sbci	r24, 0x00	; 0
 2b0:	90 40       	sbci	r25, 0x00	; 0
 2b2:	e1 f7       	brne	.-8      	; 0x2ac <__vector_13+0xc4>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <__vector_13+0xce>
 2b6:	00 00       	nop
			_delay_ms(500);
		}
		if (addr > 7 && addr < 120)
 2b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2bc:	88 50       	subi	r24, 0x08	; 8
 2be:	80 37       	cpi	r24, 0x70	; 112
 2c0:	08 f0       	brcs	.+2      	; 0x2c4 <__vector_13+0xdc>
 2c2:	58 c0       	rjmp	.+176    	; 0x374 <__vector_13+0x18c>
			state = STATE_SEND;
 2c4:	82 e0       	ldi	r24, 0x02	; 2
 2c6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.2095>
 2ca:	54 c0       	rjmp	.+168    	; 0x374 <__vector_13+0x18c>
        // |      from Master       | from Slave |
        // +------------------------+------------+
        // | 7  6  5  4  3  2  1  0 |     ACK    |
        // |a6 a5 a4 a3 a2 a1 a0 R/W|   result   |
        // +------------------------+------------+
        result = twi_start((addr<<1) + TWI_WRITE);
 2cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2d0:	88 0f       	add	r24, r24
 2d2:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <twi_start>
 2d6:	18 2f       	mov	r17, r24
        twi_stop();
 2d8:	0e 94 00 02 	call	0x400	; 0x400 <twi_stop>
        /* Test result from I2C bus. If it is 0 then move to ACK state, 
         * otherwise move to IDLE */
		if (result == 0)
 2dc:	11 11       	cpse	r17, r1
 2de:	04 c0       	rjmp	.+8      	; 0x2e8 <__vector_13+0x100>
			state = STATE_ACK;
 2e0:	83 e0       	ldi	r24, 0x03	; 3
 2e2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.2095>
 2e6:	46 c0       	rjmp	.+140    	; 0x374 <__vector_13+0x18c>
		else
		{
			uint8_t tmp = addr % 16;
 2e8:	10 91 00 01 	lds	r17, 0x0100	; 0x800100 <__data_start>
			uint8_t tmp_addr = addr / 15;
			char tmp_str[1] = " ";
 2ec:	80 e2       	ldi	r24, 0x20	; 32
 2ee:	8b 83       	std	Y+3, r24	; 0x03
 2f0:	89 e8       	ldi	r24, 0x89	; 137
 2f2:	18 9f       	mul	r17, r24
 2f4:	81 2d       	mov	r24, r1
 2f6:	11 24       	eor	r1, r1
 2f8:	86 95       	lsr	r24
 2fa:	86 95       	lsr	r24
 2fc:	86 95       	lsr	r24
 2fe:	4a e0       	ldi	r20, 0x0A	; 10
 300:	be 01       	movw	r22, r28
 302:	6d 5f       	subi	r22, 0xFD	; 253
 304:	7f 4f       	sbci	r23, 0xFF	; 255
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 ab 02 	call	0x556	; 0x556 <__itoa_ncheck>
			itoa(tmp_addr, tmp_str, 10);
			if (tmp != 0)
 30c:	1f 70       	andi	r17, 0x0F	; 15
 30e:	29 f0       	breq	.+10     	; 0x31a <__vector_13+0x132>
			{
				uart_puts_P("-- ");
 310:	85 e7       	ldi	r24, 0x75	; 117
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 99 02 	call	0x532	; 0x532 <uart_puts_p>
 318:	0c c0       	rjmp	.+24     	; 0x332 <__vector_13+0x14a>
			}
			else
			{
				uart_puts_P("--\r\n0x");
 31a:	8e e6       	ldi	r24, 0x6E	; 110
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 99 02 	call	0x532	; 0x532 <uart_puts_p>
				uart_puts(tmp_str);
 322:	ce 01       	movw	r24, r28
 324:	03 96       	adiw	r24, 0x03	; 3
 326:	0e 94 8a 02 	call	0x514	; 0x514 <uart_puts>
				uart_puts_P(".: ");
 32a:	8a e6       	ldi	r24, 0x6A	; 106
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	0e 94 99 02 	call	0x532	; 0x532 <uart_puts_p>
				
			}
			state = STATE_IDLE;
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.2095>
 338:	1d c0       	rjmp	.+58     	; 0x374 <__vector_13+0x18c>
        break;

    // A module connected to the bus was found
    case STATE_ACK:
        // Send info about active I2C slave to UART and move to IDLE
		cnt++;
 33a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 33e:	8f 5f       	subi	r24, 0xFF	; 255
 340:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
 344:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 348:	40 e1       	ldi	r20, 0x10	; 16
 34a:	be 01       	movw	r22, r28
 34c:	6f 5f       	subi	r22, 0xFF	; 255
 34e:	7f 4f       	sbci	r23, 0xFF	; 255
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 ab 02 	call	0x556	; 0x556 <__itoa_ncheck>
		itoa(addr, uart_string, 16);
		uart_puts(uart_string);
 356:	ce 01       	movw	r24, r28
 358:	01 96       	adiw	r24, 0x01	; 1
 35a:	0e 94 8a 02 	call	0x514	; 0x514 <uart_puts>
		uart_puts_P(" ");
 35e:	88 e6       	ldi	r24, 0x68	; 104
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 99 02 	call	0x532	; 0x532 <uart_puts_p>
		state = STATE_IDLE;		
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.2095>
        break;
 36c:	03 c0       	rjmp	.+6      	; 0x374 <__vector_13+0x18c>

    // If something unexpected happens then move to IDLE
    default:
        state = STATE_IDLE;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.2095>
        break;
    }
 374:	0f 90       	pop	r0
 376:	0f 90       	pop	r0
 378:	0f 90       	pop	r0
 37a:	0f 90       	pop	r0
 37c:	0f 90       	pop	r0
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	ff 91       	pop	r31
 384:	ef 91       	pop	r30
 386:	bf 91       	pop	r27
 388:	af 91       	pop	r26
 38a:	9f 91       	pop	r25
 38c:	8f 91       	pop	r24
 38e:	7f 91       	pop	r23
 390:	6f 91       	pop	r22
 392:	5f 91       	pop	r21
 394:	4f 91       	pop	r20
 396:	3f 91       	pop	r19
 398:	2f 91       	pop	r18
 39a:	1f 91       	pop	r17
 39c:	0f 90       	pop	r0
 39e:	0f be       	out	0x3f, r0	; 63
 3a0:	0f 90       	pop	r0
 3a2:	1f 90       	pop	r1
 3a4:	18 95       	reti

000003a6 <twi_init>:
{
    TWCR = _BV(TWINT) | _BV(TWEN);

    while ((TWCR & _BV(TWINT)) == 0);
    return (TWDR);
}
 3a6:	87 b1       	in	r24, 0x07	; 7
 3a8:	8f 7c       	andi	r24, 0xCF	; 207
 3aa:	87 b9       	out	0x07, r24	; 7
 3ac:	88 b1       	in	r24, 0x08	; 8
 3ae:	80 63       	ori	r24, 0x30	; 48
 3b0:	88 b9       	out	0x08, r24	; 8
 3b2:	e9 eb       	ldi	r30, 0xB9	; 185
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	8c 7f       	andi	r24, 0xFC	; 252
 3ba:	80 83       	st	Z, r24
 3bc:	88 e9       	ldi	r24, 0x98	; 152
 3be:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 3c2:	08 95       	ret

000003c4 <twi_start>:
 3c4:	94 ea       	ldi	r25, 0xA4	; 164
 3c6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 3ca:	ec eb       	ldi	r30, 0xBC	; 188
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	90 81       	ld	r25, Z
 3d0:	99 23       	and	r25, r25
 3d2:	ec f7       	brge	.-6      	; 0x3ce <twi_start+0xa>
 3d4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 3d8:	84 e8       	ldi	r24, 0x84	; 132
 3da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 3de:	ec eb       	ldi	r30, 0xBC	; 188
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	80 81       	ld	r24, Z
 3e4:	88 23       	and	r24, r24
 3e6:	ec f7       	brge	.-6      	; 0x3e2 <twi_start+0x1e>
 3e8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 3ec:	98 7f       	andi	r25, 0xF8	; 248
 3ee:	98 31       	cpi	r25, 0x18	; 24
 3f0:	29 f0       	breq	.+10     	; 0x3fc <twi_start+0x38>
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 34       	cpi	r25, 0x40	; 64
 3f6:	19 f4       	brne	.+6      	; 0x3fe <twi_start+0x3a>
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	08 95       	ret
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	08 95       	ret

00000400 <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 400:	84 e9       	ldi	r24, 0x94	; 148
 402:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 406:	08 95       	ret

00000408 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 408:	1f 92       	push	r1
 40a:	0f 92       	push	r0
 40c:	0f b6       	in	r0, 0x3f	; 63
 40e:	0f 92       	push	r0
 410:	11 24       	eor	r1, r1
 412:	2f 93       	push	r18
 414:	8f 93       	push	r24
 416:	9f 93       	push	r25
 418:	ef 93       	push	r30
 41a:	ff 93       	push	r31
 41c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 420:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 424:	8c 71       	andi	r24, 0x1C	; 28
 426:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <UART_RxHead>
 42a:	ef 5f       	subi	r30, 0xFF	; 255
 42c:	ef 71       	andi	r30, 0x1F	; 31
 42e:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <UART_RxTail>
 432:	e9 17       	cp	r30, r25
 434:	39 f0       	breq	.+14     	; 0x444 <__vector_18+0x3c>
 436:	e0 93 23 01 	sts	0x0123, r30	; 0x800123 <UART_RxHead>
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	ea 5d       	subi	r30, 0xDA	; 218
 43e:	fe 4f       	sbci	r31, 0xFE	; 254
 440:	20 83       	st	Z, r18
 442:	01 c0       	rjmp	.+2      	; 0x446 <__vector_18+0x3e>
 444:	82 e0       	ldi	r24, 0x02	; 2
 446:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <UART_LastRxError>
 44a:	89 2b       	or	r24, r25
 44c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <UART_LastRxError>
 450:	ff 91       	pop	r31
 452:	ef 91       	pop	r30
 454:	9f 91       	pop	r25
 456:	8f 91       	pop	r24
 458:	2f 91       	pop	r18
 45a:	0f 90       	pop	r0
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	0f 90       	pop	r0
 460:	1f 90       	pop	r1
 462:	18 95       	reti

00000464 <__vector_19>:
 464:	1f 92       	push	r1
 466:	0f 92       	push	r0
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	0f 92       	push	r0
 46c:	11 24       	eor	r1, r1
 46e:	8f 93       	push	r24
 470:	9f 93       	push	r25
 472:	ef 93       	push	r30
 474:	ff 93       	push	r31
 476:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <UART_TxHead>
 47a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <UART_TxTail>
 47e:	98 17       	cp	r25, r24
 480:	69 f0       	breq	.+26     	; 0x49c <__vector_19+0x38>
 482:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <UART_TxTail>
 486:	ef 5f       	subi	r30, 0xFF	; 255
 488:	ef 77       	andi	r30, 0x7F	; 127
 48a:	e0 93 24 01 	sts	0x0124, r30	; 0x800124 <UART_TxTail>
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	ea 5b       	subi	r30, 0xBA	; 186
 492:	fe 4f       	sbci	r31, 0xFE	; 254
 494:	80 81       	ld	r24, Z
 496:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 49a:	05 c0       	rjmp	.+10     	; 0x4a6 <__vector_19+0x42>
 49c:	e1 ec       	ldi	r30, 0xC1	; 193
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	80 81       	ld	r24, Z
 4a2:	8f 7d       	andi	r24, 0xDF	; 223
 4a4:	80 83       	st	Z, r24
 4a6:	ff 91       	pop	r31
 4a8:	ef 91       	pop	r30
 4aa:	9f 91       	pop	r25
 4ac:	8f 91       	pop	r24
 4ae:	0f 90       	pop	r0
 4b0:	0f be       	out	0x3f, r0	; 63
 4b2:	0f 90       	pop	r0
 4b4:	1f 90       	pop	r1
 4b6:	18 95       	reti

000004b8 <uart_init>:
 4b8:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <UART_TxHead>
 4bc:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <UART_TxTail>
 4c0:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <UART_RxHead>
 4c4:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <UART_RxTail>
 4c8:	99 23       	and	r25, r25
 4ca:	1c f4       	brge	.+6      	; 0x4d2 <uart_init+0x1a>
 4cc:	22 e0       	ldi	r18, 0x02	; 2
 4ce:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 4d2:	90 78       	andi	r25, 0x80	; 128
 4d4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 4d8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 4dc:	88 e9       	ldi	r24, 0x98	; 152
 4de:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 4e2:	86 e0       	ldi	r24, 0x06	; 6
 4e4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 4e8:	08 95       	ret

000004ea <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 4ea:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <UART_TxHead>
 4ee:	2f 5f       	subi	r18, 0xFF	; 255
 4f0:	2f 77       	andi	r18, 0x7F	; 127

    while (tmphead == UART_TxTail)
 4f2:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <UART_TxTail>
 4f6:	29 17       	cp	r18, r25
 4f8:	e1 f3       	breq	.-8      	; 0x4f2 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 4fa:	e2 2f       	mov	r30, r18
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	ea 5b       	subi	r30, 0xBA	; 186
 500:	fe 4f       	sbci	r31, 0xFE	; 254
 502:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 504:	20 93 25 01 	sts	0x0125, r18	; 0x800125 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 508:	e1 ec       	ldi	r30, 0xC1	; 193
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	80 81       	ld	r24, Z
 50e:	80 62       	ori	r24, 0x20	; 32
 510:	80 83       	st	Z, r24
 512:	08 95       	ret

00000514 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 514:	cf 93       	push	r28
 516:	df 93       	push	r29
 518:	ec 01       	movw	r28, r24
    while (*s)
 51a:	88 81       	ld	r24, Y
 51c:	88 23       	and	r24, r24
 51e:	31 f0       	breq	.+12     	; 0x52c <uart_puts+0x18>
 520:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 522:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 526:	89 91       	ld	r24, Y+
 528:	81 11       	cpse	r24, r1
 52a:	fb cf       	rjmp	.-10     	; 0x522 <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 52c:	df 91       	pop	r29
 52e:	cf 91       	pop	r28
 530:	08 95       	ret

00000532 <uart_puts_p>:
 * Purpose:  transmit string from program memory to UART
 * Input:    program memory string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s)
{
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
 536:	ec 01       	movw	r28, r24
 538:	21 96       	adiw	r28, 0x01	; 1
 53a:	fc 01       	movw	r30, r24
 53c:	84 91       	lpm	r24, Z
 53e:	88 23       	and	r24, r24
 540:	39 f0       	breq	.+14     	; 0x550 <uart_puts_p+0x1e>
        uart_putc(c);
 542:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_putc>
 **************************************************************************/
void uart_puts_p(const char *progmem_s)
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
 546:	fe 01       	movw	r30, r28
 548:	84 91       	lpm	r24, Z
 54a:	21 96       	adiw	r28, 0x01	; 1
 54c:	81 11       	cpse	r24, r1
 54e:	f9 cf       	rjmp	.-14     	; 0x542 <uart_puts_p+0x10>
        uart_putc(c);
}/* uart_puts_p */
 550:	df 91       	pop	r29
 552:	cf 91       	pop	r28
 554:	08 95       	ret

00000556 <__itoa_ncheck>:
 556:	bb 27       	eor	r27, r27
 558:	4a 30       	cpi	r20, 0x0A	; 10
 55a:	31 f4       	brne	.+12     	; 0x568 <__itoa_ncheck+0x12>
 55c:	99 23       	and	r25, r25
 55e:	22 f4       	brpl	.+8      	; 0x568 <__itoa_ncheck+0x12>
 560:	bd e2       	ldi	r27, 0x2D	; 45
 562:	90 95       	com	r25
 564:	81 95       	neg	r24
 566:	9f 4f       	sbci	r25, 0xFF	; 255
 568:	0c 94 b7 02 	jmp	0x56e	; 0x56e <__utoa_common>

0000056c <__utoa_ncheck>:
 56c:	bb 27       	eor	r27, r27

0000056e <__utoa_common>:
 56e:	fb 01       	movw	r30, r22
 570:	55 27       	eor	r21, r21
 572:	aa 27       	eor	r26, r26
 574:	88 0f       	add	r24, r24
 576:	99 1f       	adc	r25, r25
 578:	aa 1f       	adc	r26, r26
 57a:	a4 17       	cp	r26, r20
 57c:	10 f0       	brcs	.+4      	; 0x582 <__utoa_common+0x14>
 57e:	a4 1b       	sub	r26, r20
 580:	83 95       	inc	r24
 582:	50 51       	subi	r21, 0x10	; 16
 584:	b9 f7       	brne	.-18     	; 0x574 <__utoa_common+0x6>
 586:	a0 5d       	subi	r26, 0xD0	; 208
 588:	aa 33       	cpi	r26, 0x3A	; 58
 58a:	08 f0       	brcs	.+2      	; 0x58e <__utoa_common+0x20>
 58c:	a9 5d       	subi	r26, 0xD9	; 217
 58e:	a1 93       	st	Z+, r26
 590:	00 97       	sbiw	r24, 0x00	; 0
 592:	79 f7       	brne	.-34     	; 0x572 <__utoa_common+0x4>
 594:	b1 11       	cpse	r27, r1
 596:	b1 93       	st	Z+, r27
 598:	11 92       	st	Z+, r1
 59a:	cb 01       	movw	r24, r22
 59c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <strrev>

000005a0 <strrev>:
 5a0:	dc 01       	movw	r26, r24
 5a2:	fc 01       	movw	r30, r24
 5a4:	67 2f       	mov	r22, r23
 5a6:	71 91       	ld	r23, Z+
 5a8:	77 23       	and	r23, r23
 5aa:	e1 f7       	brne	.-8      	; 0x5a4 <strrev+0x4>
 5ac:	32 97       	sbiw	r30, 0x02	; 2
 5ae:	04 c0       	rjmp	.+8      	; 0x5b8 <strrev+0x18>
 5b0:	7c 91       	ld	r23, X
 5b2:	6d 93       	st	X+, r22
 5b4:	70 83       	st	Z, r23
 5b6:	62 91       	ld	r22, -Z
 5b8:	ae 17       	cp	r26, r30
 5ba:	bf 07       	cpc	r27, r31
 5bc:	c8 f3       	brcs	.-14     	; 0x5b0 <strrev+0x10>
 5be:	08 95       	ret

000005c0 <_exit>:
 5c0:	f8 94       	cli

000005c2 <__stop_program>:
 5c2:	ff cf       	rjmp	.-2      	; 0x5c2 <__stop_program>
