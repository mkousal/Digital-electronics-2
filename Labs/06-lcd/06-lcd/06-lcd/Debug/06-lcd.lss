
06-lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  00000658  000006ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000658  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800168  00800168  00000754  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000784  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015d7  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a35  00000000  00000000  00001e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000093d  00000000  00000000  000028a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b8  00000000  00000000  000031e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000553  00000000  00000000  00003498  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c73  00000000  00000000  000039eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000465e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 a2 02 	jmp	0x544	; 0x544 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e5       	ldi	r30, 0x58	; 88
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 36       	cpi	r26, 0x68	; 104
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e6       	ldi	r26, 0x68	; 104
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 37       	cpi	r26, 0x70	; 112
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 10 01 	call	0x220	; 0x220 <main>
  9e:	0c 94 2a 03 	jmp	0x654	; 0x654 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <toggle_e+0x4>
  ae:	00 00       	nop
  b0:	29 98       	cbi	0x05, 1	; 5
  b2:	08 95       	ret

000000b4 <lcd_write>:
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
  b8:	66 23       	and	r22, r22
  ba:	11 f0       	breq	.+4      	; 0xc0 <lcd_write+0xc>
  bc:	28 9a       	sbi	0x05, 0	; 5
  be:	01 c0       	rjmp	.+2      	; 0xc2 <lcd_write+0xe>
  c0:	28 98       	cbi	0x05, 0	; 5
  c2:	54 9a       	sbi	0x0a, 4	; 10
  c4:	55 9a       	sbi	0x0a, 5	; 10
  c6:	56 9a       	sbi	0x0a, 6	; 10
  c8:	57 9a       	sbi	0x0a, 7	; 10
  ca:	5f 98       	cbi	0x0b, 7	; 11
  cc:	5e 98       	cbi	0x0b, 6	; 11
  ce:	5d 98       	cbi	0x0b, 5	; 11
  d0:	5c 98       	cbi	0x0b, 4	; 11
  d2:	cc 23       	and	r28, r28
  d4:	0c f4       	brge	.+2      	; 0xd8 <lcd_write+0x24>
  d6:	5f 9a       	sbi	0x0b, 7	; 11
  d8:	c6 fd       	sbrc	r28, 6
  da:	5e 9a       	sbi	0x0b, 6	; 11
  dc:	c5 fd       	sbrc	r28, 5
  de:	5d 9a       	sbi	0x0b, 5	; 11
  e0:	c4 fd       	sbrc	r28, 4
  e2:	5c 9a       	sbi	0x0b, 4	; 11
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e8:	5f 98       	cbi	0x0b, 7	; 11
  ea:	5e 98       	cbi	0x0b, 6	; 11
  ec:	5d 98       	cbi	0x0b, 5	; 11
  ee:	5c 98       	cbi	0x0b, 4	; 11
  f0:	c3 fd       	sbrc	r28, 3
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	c2 fd       	sbrc	r28, 2
  f6:	5e 9a       	sbi	0x0b, 6	; 11
  f8:	c1 fd       	sbrc	r28, 1
  fa:	5d 9a       	sbi	0x0b, 5	; 11
  fc:	c0 fd       	sbrc	r28, 0
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 104:	5c 9a       	sbi	0x0b, 4	; 11
 106:	5d 9a       	sbi	0x0b, 5	; 11
 108:	5e 9a       	sbi	0x0b, 6	; 11
 10a:	5f 9a       	sbi	0x0b, 7	; 11
 10c:	87 eb       	ldi	r24, 0xB7	; 183
 10e:	9b e0       	ldi	r25, 0x0B	; 11
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_write+0x5c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_write+0x62>
 116:	00 00       	nop
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <lcd_command>:
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 122:	08 95       	ret

00000124 <lcd_data>:
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 12a:	08 95       	ret

0000012c <lcd_gotoxy>:
 12c:	61 11       	cpse	r22, r1
 12e:	04 c0       	rjmp	.+8      	; 0x138 <lcd_gotoxy+0xc>
 130:	80 58       	subi	r24, 0x80	; 128
 132:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 136:	08 95       	ret
 138:	80 54       	subi	r24, 0x40	; 64
 13a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 13e:	08 95       	ret

00000140 <lcd_clrscr>:
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 146:	08 95       	ret

00000148 <lcd_putc>:
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 14e:	08 95       	ret

00000150 <lcd_puts>:
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	ec 01       	movw	r28, r24
 156:	21 96       	adiw	r28, 0x01	; 1
 158:	fc 01       	movw	r30, r24
 15a:	80 81       	ld	r24, Z
 15c:	88 23       	and	r24, r24
 15e:	29 f0       	breq	.+10     	; 0x16a <lcd_puts+0x1a>
 160:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 164:	89 91       	ld	r24, Y+
 166:	81 11       	cpse	r24, r1
 168:	fb cf       	rjmp	.-10     	; 0x160 <lcd_puts+0x10>
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 170:	cf 93       	push	r28
 172:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 174:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 176:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 178:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 17a:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 17c:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 17e:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 180:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	99 ef       	ldi	r25, 0xF9	; 249
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_init+0x16>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_init+0x1c>
 18c:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 18e:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 190:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 192:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 196:	8f e1       	ldi	r24, 0x1F	; 31
 198:	9e e4       	ldi	r25, 0x4E	; 78
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_init+0x2a>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lcd_init+0x30>
 1a0:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_init+0x3a>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_init+0x40>
 1b0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1b2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_init+0x4a>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lcd_init+0x50>
 1c0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1c2:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1c4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_init+0x5c>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_init+0x62>
 1d2:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1d4:	88 e2       	ldi	r24, 0x28	; 40
 1d6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1da:	88 e0       	ldi	r24, 0x08	; 8
 1dc:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1e0:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1e4:	86 e0       	ldi	r24, 0x06	; 6
 1e6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1ea:	8c 2f       	mov	r24, r28
 1ec:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
}/* lcd_init */
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <lcdUploadCustomChars>:
#include <stdlib.h>         // C library. Needed for conversion function
#include "util/delay.h"		// AVR delay library
#include "customChars.h"	// Custom LCD characters defines

void lcdUploadCustomChars()
{
 1f4:	0f 93       	push	r16
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
	lcd_command(1 << LCD_CGRAM);
 1fc:	80 e4       	ldi	r24, 0x40	; 64
 1fe:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 202:	c0 e0       	ldi	r28, 0x00	; 0
 204:	d1 e0       	ldi	r29, 0x01	; 1
 206:	00 e3       	ldi	r16, 0x30	; 48
 208:	11 e0       	ldi	r17, 0x01	; 1
	for (uint8_t j = 0; j != sizeof(customChar); j++)
		lcd_data(customChar[j]);
 20a:	89 91       	ld	r24, Y+
 20c:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
#include "customChars.h"	// Custom LCD characters defines

void lcdUploadCustomChars()
{
	lcd_command(1 << LCD_CGRAM);
	for (uint8_t j = 0; j != sizeof(customChar); j++)
 210:	c0 17       	cp	r28, r16
 212:	d1 07       	cpc	r29, r17
 214:	d1 f7       	brne	.-12     	; 0x20a <lcdUploadCustomChars+0x16>
		lcd_data(customChar[j]);

}
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	1f 91       	pop	r17
 21c:	0f 91       	pop	r16
 21e:	08 95       	ret

00000220 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 220:	8c e0       	ldi	r24, 0x0C	; 12
 222:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_init>
	
	lcdUploadCustomChars();
 226:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcdUploadCustomChars>

    // Put string(s) at LCD display
    lcd_gotoxy(0, 0);
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
    lcd_puts("Hello");
 232:	80 e3       	ldi	r24, 0x30	; 48
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
    lcd_putc('!');
 23a:	81 e2       	ldi	r24, 0x21	; 33
 23c:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 240:	2f ef       	ldi	r18, 0xFF	; 255
 242:	89 e6       	ldi	r24, 0x69	; 105
 244:	98 e1       	ldi	r25, 0x18	; 24
 246:	21 50       	subi	r18, 0x01	; 1
 248:	80 40       	sbci	r24, 0x00	; 0
 24a:	90 40       	sbci	r25, 0x00	; 0
 24c:	e1 f7       	brne	.-8      	; 0x246 <main+0x26>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <main+0x30>
 250:	00 00       	nop
	_delay_ms(500);
	lcd_clrscr();
 252:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_clrscr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 256:	87 eb       	ldi	r24, 0xB7	; 183
 258:	9b e0       	ldi	r25, 0x0B	; 11
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <main+0x3a>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0x40>
 260:	00 00       	nop
	_delay_us(750);
	lcd_gotoxy(1, 0);
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_puts("00:00.0");
 26a:	86 e3       	ldi	r24, 0x36	; 54
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
	lcd_gotoxy(11, 0);
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	8b e0       	ldi	r24, 0x0B	; 11
 276:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_putc('a');
 27a:	81 e6       	ldi	r24, 0x61	; 97
 27c:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
	lcd_gotoxy(1, 1);
 280:	61 e0       	ldi	r22, 0x01	; 1
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_putc('b');
 288:	82 e6       	ldi	r24, 0x62	; 98
 28a:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
	lcd_putc(0);
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
	lcd_gotoxy(11, 1);
 294:	61 e0       	ldi	r22, 0x01	; 1
 296:	8b e0       	ldi	r24, 0x0B	; 11
 298:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_putc('c');
 29c:	83 e6       	ldi	r24, 0x63	; 99
 29e:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a2:	9f ef       	ldi	r25, 0xFF	; 255
 2a4:	27 ea       	ldi	r18, 0xA7	; 167
 2a6:	81 e6       	ldi	r24, 0x61	; 97
 2a8:	91 50       	subi	r25, 0x01	; 1
 2aa:	20 40       	sbci	r18, 0x00	; 0
 2ac:	80 40       	sbci	r24, 0x00	; 0
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <main+0x88>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <main+0x92>
 2b2:	00 00       	nop
	_delay_ms(2000);

    // Configure 8-bit Timer/Counter2 for Stopwatch
    // Set the overflow prescaler to 16 ms and enable interrupt
	TIM2_16m();
 2b4:	e1 eb       	ldi	r30, 0xB1	; 177
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	80 81       	ld	r24, Z
 2ba:	87 60       	ori	r24, 0x07	; 7
 2bc:	80 83       	st	Z, r24
	TIM2_overflow_interrupt_enable();
 2be:	e0 e7       	ldi	r30, 0x70	; 112
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 81       	ld	r24, Z
 2c4:	81 60       	ori	r24, 0x01	; 1
 2c6:	80 83       	st	Z, r24
	
	TIM0_overflow_16ms();
 2c8:	85 b5       	in	r24, 0x25	; 37
 2ca:	8d 7f       	andi	r24, 0xFD	; 253
 2cc:	85 bd       	out	0x25, r24	; 37
 2ce:	85 b5       	in	r24, 0x25	; 37
 2d0:	85 60       	ori	r24, 0x05	; 5
 2d2:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 2d4:	ee e6       	ldi	r30, 0x6E	; 110
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	81 60       	ori	r24, 0x01	; 1
 2dc:	80 83       	st	Z, r24
	
	TIM1_overflow_262ms();
 2de:	e1 e8       	ldi	r30, 0x81	; 129
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	8b 7f       	andi	r24, 0xFB	; 251
 2e6:	80 83       	st	Z, r24
 2e8:	80 81       	ld	r24, Z
 2ea:	83 60       	ori	r24, 0x03	; 3
 2ec:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 2ee:	ef e6       	ldi	r30, 0x6F	; 111
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	80 81       	ld	r24, Z
 2f4:	81 60       	ori	r24, 0x01	; 1
 2f6:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 2f8:	78 94       	sei
 2fa:	ff cf       	rjmp	.-2      	; 0x2fa <main+0xda>

000002fc <lcdUpdateNumber>:
    // Will never reach this
    return 0;
}

void lcdUpdateNumber(uint8_t num, uint8_t pos)
{
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	00 d0       	rcall	.+0      	; 0x306 <lcdUpdateNumber+0xa>
 306:	cd b7       	in	r28, 0x3d	; 61
 308:	de b7       	in	r29, 0x3e	; 62
 30a:	08 2f       	mov	r16, r24
 30c:	16 2f       	mov	r17, r22
	char lcd_str[2] = "  ";
 30e:	80 e2       	ldi	r24, 0x20	; 32
 310:	90 e2       	ldi	r25, 0x20	; 32
 312:	9a 83       	std	Y+2, r25	; 0x02
 314:	89 83       	std	Y+1, r24	; 0x01
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 316:	4a e0       	ldi	r20, 0x0A	; 10
 318:	be 01       	movw	r22, r28
 31a:	6f 5f       	subi	r22, 0xFF	; 255
 31c:	7f 4f       	sbci	r23, 0xFF	; 255
 31e:	80 2f       	mov	r24, r16
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__itoa_ncheck>
	itoa(num, lcd_str, 10);
	if (num < 10)
 326:	0a 30       	cpi	r16, 0x0A	; 10
 328:	a0 f4       	brcc	.+40     	; 0x352 <lcdUpdateNumber+0x56>
	{
		lcd_gotoxy(1 + pos*3, 0);
 32a:	81 2f       	mov	r24, r17
 32c:	88 0f       	add	r24, r24
 32e:	81 0f       	add	r24, r17
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	8f 5f       	subi	r24, 0xFF	; 255
 334:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		if (pos == 2)
 338:	12 30       	cpi	r17, 0x02	; 2
 33a:	21 f4       	brne	.+8      	; 0x344 <lcdUpdateNumber+0x48>
		{
			lcd_putc(lcd_str[0]);
 33c:	89 81       	ldd	r24, Y+1	; 0x01
 33e:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 342:	18 c0       	rjmp	.+48     	; 0x374 <lcdUpdateNumber+0x78>
		}
		else
		{
			lcd_putc('0');
 344:	80 e3       	ldi	r24, 0x30	; 48
 346:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
			lcd_putc(lcd_str[0]);
 34a:	89 81       	ldd	r24, Y+1	; 0x01
 34c:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 350:	11 c0       	rjmp	.+34     	; 0x374 <lcdUpdateNumber+0x78>
		}
	} 
	else
	{
		lcd_gotoxy(1 + pos*3, 0);
 352:	81 2f       	mov	r24, r17
 354:	88 0f       	add	r24, r24
 356:	81 0f       	add	r24, r17
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	8f 5f       	subi	r24, 0xFF	; 255
 35c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		if (pos == 2)
 360:	12 30       	cpi	r17, 0x02	; 2
 362:	21 f4       	brne	.+8      	; 0x36c <lcdUpdateNumber+0x70>
			lcd_putc(lcd_str[0]);
 364:	89 81       	ldd	r24, Y+1	; 0x01
 366:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 36a:	04 c0       	rjmp	.+8      	; 0x374 <lcdUpdateNumber+0x78>
		else
			lcd_puts(lcd_str);
 36c:	ce 01       	movw	r24, r28
 36e:	01 96       	adiw	r24, 0x01	; 1
 370:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
	}
}
 374:	0f 90       	pop	r0
 376:	0f 90       	pop	r0
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	1f 91       	pop	r17
 37e:	0f 91       	pop	r16
 380:	08 95       	ret

00000382 <lcdShowSquareValue>:

void lcdShowSquareValue(uint8_t a)
{
 382:	1f 93       	push	r17
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	00 d0       	rcall	.+0      	; 0x38a <lcdShowSquareValue+0x8>
 38a:	00 d0       	rcall	.+0      	; 0x38c <lcdShowSquareValue+0xa>
 38c:	cd b7       	in	r28, 0x3d	; 61
 38e:	de b7       	in	r29, 0x3e	; 62
 390:	18 2f       	mov	r17, r24
	char buff[4] = "    ";
 392:	80 e2       	ldi	r24, 0x20	; 32
 394:	90 e2       	ldi	r25, 0x20	; 32
 396:	9a 83       	std	Y+2, r25	; 0x02
 398:	89 83       	std	Y+1, r24	; 0x01
 39a:	9c 83       	std	Y+4, r25	; 0x04
 39c:	8b 83       	std	Y+3, r24	; 0x03
	lcd_gotoxy(11, 0);
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	8b e0       	ldi	r24, 0x0B	; 11
 3a2:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_puts("    ");
 3a6:	84 e4       	ldi	r24, 0x44	; 68
 3a8:	91 e0       	ldi	r25, 0x01	; 1
 3aa:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
	lcd_gotoxy(11, 0);
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	8b e0       	ldi	r24, 0x0B	; 11
 3b2:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 3b6:	4a e0       	ldi	r20, 0x0A	; 10
 3b8:	be 01       	movw	r22, r28
 3ba:	6f 5f       	subi	r22, 0xFF	; 255
 3bc:	7f 4f       	sbci	r23, 0xFF	; 255
 3be:	11 9f       	mul	r17, r17
 3c0:	c0 01       	movw	r24, r0
 3c2:	11 24       	eor	r1, r1
 3c4:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__itoa_ncheck>
	itoa(a*a, buff, 10);
	lcd_puts(buff);
 3c8:	ce 01       	movw	r24, r28
 3ca:	01 96       	adiw	r24, 0x01	; 1
 3cc:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
}
 3d0:	0f 90       	pop	r0
 3d2:	0f 90       	pop	r0
 3d4:	0f 90       	pop	r0
 3d6:	0f 90       	pop	r0
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	1f 91       	pop	r17
 3de:	08 95       	ret

000003e0 <__vector_9>:
 * Function: Timer/Counter2 overflow interrupt
 * Purpose:  Update the stopwatch on LCD display every sixth overflow,
 *           ie approximately every 100 ms (6 x 16 ms = 100 ms).
 **********************************************************************/
ISR(TIMER2_OVF_vect)
{
 3e0:	1f 92       	push	r1
 3e2:	0f 92       	push	r0
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	0f 92       	push	r0
 3e8:	11 24       	eor	r1, r1
 3ea:	2f 93       	push	r18
 3ec:	3f 93       	push	r19
 3ee:	4f 93       	push	r20
 3f0:	5f 93       	push	r21
 3f2:	6f 93       	push	r22
 3f4:	7f 93       	push	r23
 3f6:	8f 93       	push	r24
 3f8:	9f 93       	push	r25
 3fa:	af 93       	push	r26
 3fc:	bf 93       	push	r27
 3fe:	ef 93       	push	r30
 400:	ff 93       	push	r31
    static uint8_t number_of_overflows = 0;
	static uint8_t tens, secs, mins = 0;
	
    number_of_overflows++;
 402:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <number_of_overflows.2089>
 406:	8f 5f       	subi	r24, 0xFF	; 255
    if (number_of_overflows >= 6)
 408:	86 30       	cpi	r24, 0x06	; 6
 40a:	18 f4       	brcc	.+6      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
ISR(TIMER2_OVF_vect)
{
    static uint8_t number_of_overflows = 0;
	static uint8_t tens, secs, mins = 0;
	
    number_of_overflows++;
 40c:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <number_of_overflows.2089>
 410:	40 c0       	rjmp	.+128    	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
    if (number_of_overflows >= 6)
    {
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows = 0;
 412:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <number_of_overflows.2089>
		tens++;
 416:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <tens.2090>
 41a:	8f 5f       	subi	r24, 0xFF	; 255
 41c:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <tens.2090>
		lcdUpdateNumber(tens, 2);
 420:	62 e0       	ldi	r22, 0x02	; 2
 422:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcdUpdateNumber>
		
		if (tens == 10)
 426:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <tens.2090>
 42a:	8a 30       	cpi	r24, 0x0A	; 10
 42c:	91 f5       	brne	.+100    	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
		{
			tens = 0;
 42e:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <tens.2090>
			secs++;
 432:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <secs.2091>
 436:	8f 5f       	subi	r24, 0xFF	; 255
 438:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <secs.2091>
			lcdUpdateNumber(tens, 2);
 43c:	62 e0       	ldi	r22, 0x02	; 2
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcdUpdateNumber>
			lcdUpdateNumber(secs, 1);
 444:	61 e0       	ldi	r22, 0x01	; 1
 446:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <secs.2091>
 44a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcdUpdateNumber>
			lcdShowSquareValue(secs);
 44e:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <secs.2091>
 452:	0e 94 c1 01 	call	0x382	; 0x382 <lcdShowSquareValue>
			if (secs == 60)
 456:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <secs.2091>
 45a:	8c 33       	cpi	r24, 0x3C	; 60
 45c:	81 f4       	brne	.+32     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
			{
				mins++;
 45e:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <mins.2092>
 462:	8f 5f       	subi	r24, 0xFF	; 255
 464:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <mins.2092>
				secs = 0;
 468:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <secs.2091>
				lcdUpdateNumber(secs, 1);
 46c:	61 e0       	ldi	r22, 0x01	; 1
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcdUpdateNumber>
				lcdUpdateNumber(mins, 0);
 474:	60 e0       	ldi	r22, 0x00	; 0
 476:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <mins.2092>
 47a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcdUpdateNumber>
			}
			
			if (mins == 60)
 47e:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <mins.2092>
 482:	8c 33       	cpi	r24, 0x3C	; 60
 484:	31 f4       	brne	.+12     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
			{
				mins = 0;
 486:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <mins.2092>
				lcdUpdateNumber(mins, 0);
 48a:	60 e0       	ldi	r22, 0x00	; 0
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcdUpdateNumber>
			}
		}
		
    }
    // Else do nothing and exit the ISR
}
 492:	ff 91       	pop	r31
 494:	ef 91       	pop	r30
 496:	bf 91       	pop	r27
 498:	af 91       	pop	r26
 49a:	9f 91       	pop	r25
 49c:	8f 91       	pop	r24
 49e:	7f 91       	pop	r23
 4a0:	6f 91       	pop	r22
 4a2:	5f 91       	pop	r21
 4a4:	4f 91       	pop	r20
 4a6:	3f 91       	pop	r19
 4a8:	2f 91       	pop	r18
 4aa:	0f 90       	pop	r0
 4ac:	0f be       	out	0x3f, r0	; 63
 4ae:	0f 90       	pop	r0
 4b0:	1f 90       	pop	r1
 4b2:	18 95       	reti

000004b4 <__vector_16>:

ISR(TIMER0_OVF_vect) // Runs every 16 ms, 6*16 = 96ms (:=) 100ms
{
 4b4:	1f 92       	push	r1
 4b6:	0f 92       	push	r0
 4b8:	0f b6       	in	r0, 0x3f	; 63
 4ba:	0f 92       	push	r0
 4bc:	11 24       	eor	r1, r1
 4be:	2f 93       	push	r18
 4c0:	3f 93       	push	r19
 4c2:	4f 93       	push	r20
 4c4:	5f 93       	push	r21
 4c6:	6f 93       	push	r22
 4c8:	7f 93       	push	r23
 4ca:	8f 93       	push	r24
 4cc:	9f 93       	push	r25
 4ce:	af 93       	push	r26
 4d0:	bf 93       	push	r27
 4d2:	ef 93       	push	r30
 4d4:	ff 93       	push	r31
	static uint8_t pos, sym = 0;
	lcd_gotoxy(1 + pos, 1);
 4d6:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <pos.2098>
 4da:	61 e0       	ldi	r22, 0x01	; 1
 4dc:	8f 5f       	subi	r24, 0xFF	; 255
 4de:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_putc(sym);
 4e2:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <sym.2099>
 4e6:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
	sym++;
 4ea:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <sym.2099>
 4ee:	8f 5f       	subi	r24, 0xFF	; 255
	if(sym == 6)
 4f0:	86 30       	cpi	r24, 0x06	; 6
 4f2:	19 f0       	breq	.+6      	; 0x4fa <__vector_16+0x46>
ISR(TIMER0_OVF_vect) // Runs every 16 ms, 6*16 = 96ms (:=) 100ms
{
	static uint8_t pos, sym = 0;
	lcd_gotoxy(1 + pos, 1);
	lcd_putc(sym);
	sym++;
 4f4:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <sym.2099>
 4f8:	14 c0       	rjmp	.+40     	; 0x522 <__vector_16+0x6e>
	if(sym == 6)
	{
		sym = 0;
 4fa:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <sym.2099>
		pos++;
 4fe:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <pos.2098>
 502:	8f 5f       	subi	r24, 0xFF	; 255
		if (pos == 10)
 504:	8a 30       	cpi	r24, 0x0A	; 10
 506:	19 f0       	breq	.+6      	; 0x50e <__vector_16+0x5a>
	lcd_putc(sym);
	sym++;
	if(sym == 6)
	{
		sym = 0;
		pos++;
 508:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <pos.2098>
 50c:	0a c0       	rjmp	.+20     	; 0x522 <__vector_16+0x6e>
		if (pos == 10)
		{
			pos = 0;
 50e:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <pos.2098>
			lcd_gotoxy(1, 1);
 512:	61 e0       	ldi	r22, 0x01	; 1
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_puts("          ");
 51a:	8e e3       	ldi	r24, 0x3E	; 62
 51c:	91 e0       	ldi	r25, 0x01	; 1
 51e:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
		}
	}
}
 522:	ff 91       	pop	r31
 524:	ef 91       	pop	r30
 526:	bf 91       	pop	r27
 528:	af 91       	pop	r26
 52a:	9f 91       	pop	r25
 52c:	8f 91       	pop	r24
 52e:	7f 91       	pop	r23
 530:	6f 91       	pop	r22
 532:	5f 91       	pop	r21
 534:	4f 91       	pop	r20
 536:	3f 91       	pop	r19
 538:	2f 91       	pop	r18
 53a:	0f 90       	pop	r0
 53c:	0f be       	out	0x3f, r0	; 63
 53e:	0f 90       	pop	r0
 540:	1f 90       	pop	r1
 542:	18 95       	reti

00000544 <__vector_13>:

ISR(TIMER1_OVF_vect) // Runs every 262 ms, coordinates for c = (11, 1)
{
 544:	1f 92       	push	r1
 546:	0f 92       	push	r0
 548:	0f b6       	in	r0, 0x3f	; 63
 54a:	0f 92       	push	r0
 54c:	11 24       	eor	r1, r1
 54e:	2f 93       	push	r18
 550:	3f 93       	push	r19
 552:	4f 93       	push	r20
 554:	5f 93       	push	r21
 556:	6f 93       	push	r22
 558:	7f 93       	push	r23
 55a:	8f 93       	push	r24
 55c:	9f 93       	push	r25
 55e:	af 93       	push	r26
 560:	bf 93       	push	r27
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
 566:	ef 93       	push	r30
 568:	ff 93       	push	r31
	static uint8_t running_text[] = "   I like Digital Electronics\n";
	static uint8_t cnt, cnt1 = 0;
	cnt++;
 56a:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <cnt.2106>
 56e:	8f 5f       	subi	r24, 0xFF	; 255
	if (cnt == 2)
 570:	82 30       	cpi	r24, 0x02	; 2
 572:	19 f0       	breq	.+6      	; 0x57a <__vector_13+0x36>

ISR(TIMER1_OVF_vect) // Runs every 262 ms, coordinates for c = (11, 1)
{
	static uint8_t running_text[] = "   I like Digital Electronics\n";
	static uint8_t cnt, cnt1 = 0;
	cnt++;
 574:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <cnt.2106>
 578:	25 c0       	rjmp	.+74     	; 0x5c4 <__vector_13+0x80>
	if (cnt == 2)
	{
		cnt = 0;
 57a:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <cnt.2106>
		cnt1++;
 57e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end>
 582:	8f 5f       	subi	r24, 0xFF	; 255
 584:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <__data_end>
		lcd_gotoxy(11, 1);
 588:	61 e0       	ldi	r22, 0x01	; 1
 58a:	8b e0       	ldi	r24, 0x0B	; 11
 58c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		for (uint8_t i = cnt1; i != cnt1 + 5; i++)
 590:	c0 91 68 01 	lds	r28, 0x0168	; 0x800168 <__data_end>
 594:	2c 2f       	mov	r18, r28
 596:	30 e0       	ldi	r19, 0x00	; 0
		{
			lcd_putc(running_text[i]);
 598:	f9 01       	movw	r30, r18
 59a:	e7 5b       	subi	r30, 0xB7	; 183
 59c:	fe 4f       	sbci	r31, 0xFE	; 254
 59e:	d0 81       	ld	r29, Z
 5a0:	8d 2f       	mov	r24, r29
 5a2:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
			if (running_text[i] == 10){
 5a6:	da 30       	cpi	r29, 0x0A	; 10
 5a8:	19 f4       	brne	.+6      	; 0x5b0 <__vector_13+0x6c>
				cnt1 = 0;
 5aa:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <__data_end>
				break;
 5ae:	0a c0       	rjmp	.+20     	; 0x5c4 <__vector_13+0x80>
	if (cnt == 2)
	{
		cnt = 0;
		cnt1++;
		lcd_gotoxy(11, 1);
		for (uint8_t i = cnt1; i != cnt1 + 5; i++)
 5b0:	cf 5f       	subi	r28, 0xFF	; 255
 5b2:	2c 2f       	mov	r18, r28
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end>
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	05 96       	adiw	r24, 0x05	; 5
 5be:	28 17       	cp	r18, r24
 5c0:	39 07       	cpc	r19, r25
 5c2:	51 f7       	brne	.-44     	; 0x598 <__vector_13+0x54>
				break;
			}
		}

	}
 5c4:	ff 91       	pop	r31
 5c6:	ef 91       	pop	r30
 5c8:	df 91       	pop	r29
 5ca:	cf 91       	pop	r28
 5cc:	bf 91       	pop	r27
 5ce:	af 91       	pop	r26
 5d0:	9f 91       	pop	r25
 5d2:	8f 91       	pop	r24
 5d4:	7f 91       	pop	r23
 5d6:	6f 91       	pop	r22
 5d8:	5f 91       	pop	r21
 5da:	4f 91       	pop	r20
 5dc:	3f 91       	pop	r19
 5de:	2f 91       	pop	r18
 5e0:	0f 90       	pop	r0
 5e2:	0f be       	out	0x3f, r0	; 63
 5e4:	0f 90       	pop	r0
 5e6:	1f 90       	pop	r1
 5e8:	18 95       	reti

000005ea <__itoa_ncheck>:
 5ea:	bb 27       	eor	r27, r27
 5ec:	4a 30       	cpi	r20, 0x0A	; 10
 5ee:	31 f4       	brne	.+12     	; 0x5fc <__itoa_ncheck+0x12>
 5f0:	99 23       	and	r25, r25
 5f2:	22 f4       	brpl	.+8      	; 0x5fc <__itoa_ncheck+0x12>
 5f4:	bd e2       	ldi	r27, 0x2D	; 45
 5f6:	90 95       	com	r25
 5f8:	81 95       	neg	r24
 5fa:	9f 4f       	sbci	r25, 0xFF	; 255
 5fc:	0c 94 01 03 	jmp	0x602	; 0x602 <__utoa_common>

00000600 <__utoa_ncheck>:
 600:	bb 27       	eor	r27, r27

00000602 <__utoa_common>:
 602:	fb 01       	movw	r30, r22
 604:	55 27       	eor	r21, r21
 606:	aa 27       	eor	r26, r26
 608:	88 0f       	add	r24, r24
 60a:	99 1f       	adc	r25, r25
 60c:	aa 1f       	adc	r26, r26
 60e:	a4 17       	cp	r26, r20
 610:	10 f0       	brcs	.+4      	; 0x616 <__utoa_common+0x14>
 612:	a4 1b       	sub	r26, r20
 614:	83 95       	inc	r24
 616:	50 51       	subi	r21, 0x10	; 16
 618:	b9 f7       	brne	.-18     	; 0x608 <__utoa_common+0x6>
 61a:	a0 5d       	subi	r26, 0xD0	; 208
 61c:	aa 33       	cpi	r26, 0x3A	; 58
 61e:	08 f0       	brcs	.+2      	; 0x622 <__utoa_common+0x20>
 620:	a9 5d       	subi	r26, 0xD9	; 217
 622:	a1 93       	st	Z+, r26
 624:	00 97       	sbiw	r24, 0x00	; 0
 626:	79 f7       	brne	.-34     	; 0x606 <__utoa_common+0x4>
 628:	b1 11       	cpse	r27, r1
 62a:	b1 93       	st	Z+, r27
 62c:	11 92       	st	Z+, r1
 62e:	cb 01       	movw	r24, r22
 630:	0c 94 1a 03 	jmp	0x634	; 0x634 <strrev>

00000634 <strrev>:
 634:	dc 01       	movw	r26, r24
 636:	fc 01       	movw	r30, r24
 638:	67 2f       	mov	r22, r23
 63a:	71 91       	ld	r23, Z+
 63c:	77 23       	and	r23, r23
 63e:	e1 f7       	brne	.-8      	; 0x638 <strrev+0x4>
 640:	32 97       	sbiw	r30, 0x02	; 2
 642:	04 c0       	rjmp	.+8      	; 0x64c <strrev+0x18>
 644:	7c 91       	ld	r23, X
 646:	6d 93       	st	X+, r22
 648:	70 83       	st	Z, r23
 64a:	62 91       	ld	r22, -Z
 64c:	ae 17       	cp	r26, r30
 64e:	bf 07       	cpc	r27, r31
 650:	c8 f3       	brcs	.-14     	; 0x644 <strrev+0x10>
 652:	08 95       	ret

00000654 <_exit>:
 654:	f8 94       	cli

00000656 <__stop_program>:
 656:	ff cf       	rjmp	.-2      	; 0x656 <__stop_program>
