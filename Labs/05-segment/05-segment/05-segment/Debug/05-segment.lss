
05-segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000306  0000039a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000306  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800110  00800110  000003aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ebe  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a5  00000000  00000000  00001392  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000617  00000000  00000000  00001c37  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  00002250  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d1  00000000  00000000  000023e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000476  00000000  00000000  000028b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002d2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 98 00 	jmp	0x130	; 0x130 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e0       	ldi	r30, 0x06	; 6
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 31       	cpi	r26, 0x15	; 21
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 81 01 	jmp	0x302	; 0x302 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:

void GPIO_config_input_pullup (volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name &= ~(1<<pin_num);
	reg_name++;
	*reg_name |= (1<<pin_num);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
}

void GPIO_write_low (volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
	*reg_name &= ~(1<<pin_num);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:
}

void GPIO_write_high (volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name |= (1<<pin_num);
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configure SSD signals
    SEG_init();
  f0:	0e 94 0b 01 	call	0x216	; 0x216 <SEG_init>
    // Test of SSD: display number '3' at position 0
    SEG_update_shift_regs(3, 0);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	83 e0       	ldi	r24, 0x03	; 3
  f8:	0e 94 2e 01 	call	0x25c	; 0x25c <SEG_update_shift_regs>

    // Configure 16-bit Timer/Counter1 for Decimal counter
    // Set the overflow prescaler to 262 ms and enable interrupt
	TIM1_overflow_262ms();
  fc:	e1 e8       	ldi	r30, 0x81	; 129
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	8b 7f       	andi	r24, 0xFB	; 251
 104:	80 83       	st	Z, r24
 106:	80 81       	ld	r24, Z
 108:	83 60       	ori	r24, 0x03	; 3
 10a:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 10c:	ef e6       	ldi	r30, 0x6F	; 111
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	81 60       	ori	r24, 0x01	; 1
 114:	80 83       	st	Z, r24

	TIM0_overflow_1ms();
 116:	85 b5       	in	r24, 0x25	; 37
 118:	8b 7f       	andi	r24, 0xFB	; 251
 11a:	85 bd       	out	0x25, r24	; 37
 11c:	85 b5       	in	r24, 0x25	; 37
 11e:	83 60       	ori	r24, 0x03	; 3
 120:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 122:	ee e6       	ldi	r30, 0x6E	; 110
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	81 60       	ori	r24, 0x01	; 1
 12a:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
	sei();
 12c:	78 94       	sei
 12e:	ff cf       	rjmp	.-2      	; 0x12e <main+0x3e>

00000130 <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Increment decimal counter value and display it on SSD.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	8f 93       	push	r24
 13c:	ef 93       	push	r30
 13e:	ff 93       	push	r31
	cnt[0]++;	
 140:	e1 e1       	ldi	r30, 0x11	; 17
 142:	f1 e0       	ldi	r31, 0x01	; 1
 144:	80 81       	ld	r24, Z
 146:	8f 5f       	subi	r24, 0xFF	; 255
 148:	80 83       	st	Z, r24
		
	if (cnt[0] == 10)
 14a:	80 81       	ld	r24, Z
 14c:	8a 30       	cpi	r24, 0x0A	; 10
 14e:	21 f4       	brne	.+8      	; 0x158 <__vector_13+0x28>
	{
		cnt[0] = 0;
 150:	10 82       	st	Z, r1
		cnt[1]++;	
 152:	81 81       	ldd	r24, Z+1	; 0x01
 154:	8f 5f       	subi	r24, 0xFF	; 255
 156:	81 83       	std	Z+1, r24	; 0x01
	}
	if (cnt[1] == 6)
 158:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <cnt+0x1>
 15c:	86 30       	cpi	r24, 0x06	; 6
 15e:	31 f4       	brne	.+12     	; 0x16c <__vector_13+0x3c>
	{
		cnt[1] = 0;
 160:	e1 e1       	ldi	r30, 0x11	; 17
 162:	f1 e0       	ldi	r31, 0x01	; 1
 164:	11 82       	std	Z+1, r1	; 0x01
		cnt[2]++;
 166:	82 81       	ldd	r24, Z+2	; 0x02
 168:	8f 5f       	subi	r24, 0xFF	; 255
 16a:	82 83       	std	Z+2, r24	; 0x02
	}
	if (cnt[2] == 10)
 16c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <cnt+0x2>
 170:	8a 30       	cpi	r24, 0x0A	; 10
 172:	31 f4       	brne	.+12     	; 0x180 <__vector_13+0x50>
	{
		cnt[2] = 0;
 174:	e1 e1       	ldi	r30, 0x11	; 17
 176:	f1 e0       	ldi	r31, 0x01	; 1
 178:	12 82       	std	Z+2, r1	; 0x02
		cnt[3]++;
 17a:	83 81       	ldd	r24, Z+3	; 0x03
 17c:	8f 5f       	subi	r24, 0xFF	; 255
 17e:	83 83       	std	Z+3, r24	; 0x03
	}
	if (cnt[3] == 6)
 180:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <cnt+0x3>
 184:	86 30       	cpi	r24, 0x06	; 6
 186:	11 f4       	brne	.+4      	; 0x18c <__vector_13+0x5c>
	{
		cnt[3] = 0;
 188:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <cnt+0x3>
	}
}
 18c:	ff 91       	pop	r31
 18e:	ef 91       	pop	r30
 190:	8f 91       	pop	r24
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	2f 93       	push	r18
 1a8:	3f 93       	push	r19
 1aa:	4f 93       	push	r20
 1ac:	5f 93       	push	r21
 1ae:	6f 93       	push	r22
 1b0:	7f 93       	push	r23
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
 1b6:	af 93       	push	r26
 1b8:	bf 93       	push	r27
 1ba:	ef 93       	push	r30
 1bc:	ff 93       	push	r31
	static uint8_t pos = 0;
	static int8_t dir = 1;
	SEG_update_shift_regs(cnt[pos], pos);
 1be:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <__data_end>
 1c2:	e6 2f       	mov	r30, r22
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	ef 5e       	subi	r30, 0xEF	; 239
 1c8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ca:	80 81       	ld	r24, Z
 1cc:	0e 94 2e 01 	call	0x25c	; 0x25c <SEG_update_shift_regs>
	pos += dir;
 1d0:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <__data_end>
 1d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1d8:	89 0f       	add	r24, r25
 1da:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	if (pos == 3)
 1de:	83 30       	cpi	r24, 0x03	; 3
 1e0:	21 f4       	brne	.+8      	; 0x1ea <__vector_16+0x4e>
		dir = -1;
 1e2:	8f ef       	ldi	r24, 0xFF	; 255
 1e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 1e8:	05 c0       	rjmp	.+10     	; 0x1f4 <__vector_16+0x58>
	if (pos == 0)
 1ea:	81 11       	cpse	r24, r1
 1ec:	03 c0       	rjmp	.+6      	; 0x1f4 <__vector_16+0x58>
		dir = 1;
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 1f4:	ff 91       	pop	r31
 1f6:	ef 91       	pop	r30
 1f8:	bf 91       	pop	r27
 1fa:	af 91       	pop	r26
 1fc:	9f 91       	pop	r25
 1fe:	8f 91       	pop	r24
 200:	7f 91       	pop	r23
 202:	6f 91       	pop	r22
 204:	5f 91       	pop	r21
 206:	4f 91       	pop	r20
 208:	3f 91       	pop	r19
 20a:	2f 91       	pop	r18
 20c:	0f 90       	pop	r0
 20e:	0f be       	out	0x3f, r0	; 63
 210:	0f 90       	pop	r0
 212:	1f 90       	pop	r1
 214:	18 95       	reti

00000216 <SEG_init>:
 * Returns:  none
 **********************************************************************/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEG_LATCH);
 216:	64 e0       	ldi	r22, 0x04	; 4
 218:	8a e2       	ldi	r24, 0x2A	; 42
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEG_CLK);
 220:	67 e0       	ldi	r22, 0x07	; 7
 222:	8a e2       	ldi	r24, 0x2A	; 42
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEG_DATA);
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	84 e2       	ldi	r24, 0x24	; 36
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 234:	08 95       	ret

00000236 <SEG_clk_2us>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 236:	85 e0       	ldi	r24, 0x05	; 5
 238:	8a 95       	dec	r24
 23a:	f1 f7       	brne	.-4      	; 0x238 <SEG_clk_2us+0x2>
 23c:	00 00       	nop
 * Function: SEG_clk_2us()
 **********************************************************************/
void SEG_clk_2us(void)
{
	_delay_us(1);
	GPIO_write_high(&PORTD, SEG_CLK);
 23e:	67 e0       	ldi	r22, 0x07	; 7
 240:	8b e2       	ldi	r24, 0x2B	; 43
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 248:	85 e0       	ldi	r24, 0x05	; 5
 24a:	8a 95       	dec	r24
 24c:	f1 f7       	brne	.-4      	; 0x24a <SEG_clk_2us+0x14>
 24e:	00 00       	nop
	_delay_us(1);
	GPIO_write_low(&PORTD, SEG_CLK);
 250:	67 e0       	ldi	r22, 0x07	; 7
 252:	8b e2       	ldi	r24, 0x2B	; 43
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 25a:	08 95       	ret

0000025c <SEG_update_shift_regs>:
 *           position - Position of the display where the segments are to 
 *                      be displayed (p3 p2 p1 p0 xxxx, active high)
 * Returns:  none
 **********************************************************************/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 25c:	1f 93       	push	r17
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
    uint8_t bit_number;
	segments = segment_value[segments];
 262:	e8 2f       	mov	r30, r24
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	eb 5f       	subi	r30, 0xFB	; 251
 268:	fe 4f       	sbci	r31, 0xFE	; 254
 26a:	10 81       	ld	r17, Z
	position = segment_position[position];
 26c:	e6 2f       	mov	r30, r22
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	ef 5f       	subi	r30, 0xFF	; 255
 272:	fe 4f       	sbci	r31, 0xFE	; 254
 274:	d0 81       	ld	r29, Z

    // Pull LATCH, CLK, and DATA low
	GPIO_write_low(&PORTD, SEG_LATCH);
 276:	64 e0       	ldi	r22, 0x04	; 4
 278:	8b e2       	ldi	r24, 0x2B	; 43
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTD, SEG_CLK);
 280:	67 e0       	ldi	r22, 0x07	; 7
 282:	8b e2       	ldi	r24, 0x2B	; 43
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTB, SEG_DATA);
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	85 e2       	ldi	r24, 0x25	; 37
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 294:	85 e0       	ldi	r24, 0x05	; 5
 296:	8a 95       	dec	r24
 298:	f1 f7       	brne	.-4      	; 0x296 <SEG_update_shift_regs+0x3a>
 29a:	00 00       	nop
 29c:	c8 e0       	ldi	r28, 0x08	; 8
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "segments" by & (faster) or % (slower) and... 
        // ...output DATA value
		if ((segments & 0x01) == 1)
 29e:	10 ff       	sbrs	r17, 0
 2a0:	06 c0       	rjmp	.+12     	; 0x2ae <SEG_update_shift_regs+0x52>
			GPIO_write_high(&PORTB, SEG_DATA);
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	85 e2       	ldi	r24, 0x25	; 37
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2ac:	05 c0       	rjmp	.+10     	; 0x2b8 <SEG_update_shift_regs+0x5c>
		else
			GPIO_write_low(&PORTB, SEG_DATA);
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	85 e2       	ldi	r24, 0x25	; 37
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>

		SEG_clk_2us();
 2b8:	0e 94 1b 01 	call	0x236	; 0x236 <SEG_clk_2us>
        // Shift "segments"
        segments = segments >> 1;
 2bc:	16 95       	lsr	r17
 2be:	c1 50       	subi	r28, 0x01	; 1
    // Wait 1 us
	_delay_us(1);

    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 2c0:	71 f7       	brne	.-36     	; 0x29e <SEG_update_shift_regs+0x42>
 2c2:	c8 e0       	ldi	r28, 0x08	; 8
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "position" by & (faster) or % (slower) and... 
        // ...output DATA value
		if ((position & 0x01) == 1)
 2c4:	d0 ff       	sbrs	r29, 0
 2c6:	06 c0       	rjmp	.+12     	; 0x2d4 <SEG_update_shift_regs+0x78>
			GPIO_write_high(&PORTB, SEG_DATA);
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	85 e2       	ldi	r24, 0x25	; 37
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2d2:	05 c0       	rjmp	.+10     	; 0x2de <SEG_update_shift_regs+0x82>
		else
			GPIO_write_low(&PORTB, SEG_DATA);
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	85 e2       	ldi	r24, 0x25	; 37
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>

		SEG_clk_2us();
 2de:	0e 94 1b 01 	call	0x236	; 0x236 <SEG_clk_2us>
        // Shift "position"
        position = position >> 1;
 2e2:	d6 95       	lsr	r29
 2e4:	c1 50       	subi	r28, 0x01	; 1
        segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 2e6:	71 f7       	brne	.-36     	; 0x2c4 <SEG_update_shift_regs+0x68>
        // Shift "position"
        position = position >> 1;
    }

    // Pull LATCH high
	GPIO_write_high(&PORTD, SEG_LATCH);
 2e8:	64 e0       	ldi	r22, 0x04	; 4
 2ea:	8b e2       	ldi	r24, 0x2B	; 43
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2f2:	85 e0       	ldi	r24, 0x05	; 5
 2f4:	8a 95       	dec	r24
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <SEG_update_shift_regs+0x98>
 2f8:	00 00       	nop
    // Wait 1 us
	_delay_us(1);
}
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	1f 91       	pop	r17
 300:	08 95       	ret

00000302 <_exit>:
 302:	f8 94       	cli

00000304 <__stop_program>:
 304:	ff cf       	rjmp	.-2      	; 0x304 <__stop_program>
