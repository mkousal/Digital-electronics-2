
07-uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000878  0000090c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000878  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  0080011a  0080011a  00000926  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000926  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000958  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019f9  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ae5  00000000  00000000  00002491  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ad4  00000000  00000000  00002f76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002bc  00000000  00000000  00003a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000585  00000000  00000000  00003d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c47  00000000  00000000  0000428d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00004ed4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__ctors_end>
   4:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
   8:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
   c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  10:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  14:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  18:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  1c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  20:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  24:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  28:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  2c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  30:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  34:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <__vector_13>
  38:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  3c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  40:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  44:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  48:	0c 94 40 03 	jmp	0x680	; 0x680 <__vector_18>
  4c:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__vector_19>
  50:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  54:	0c 94 83 02 	jmp	0x506	; 0x506 <__vector_21>
  58:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  5c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  60:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  64:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	6e 6f       	ori	r22, 0xFE	; 254
  6a:	6e 65       	ori	r22, 0x5E	; 94
	...

0000006d <__c.2048>:
  6d:	53 65 6c 65 63 74 00                                Select.

00000074 <__c.2046>:
  74:	4c 65 66 74 00                                      Left.

00000079 <__c.2044>:
  79:	44 6f 77 6e 00                                      Down.

0000007e <__c.2042>:
  7e:	55 70 00                                            Up.

00000081 <__c.2040>:
  81:	52 69 67 68 74 00                                   Right.

00000087 <__c.2025>:
  87:	1b 5b 30 6d 00                                      .[0m.

0000008c <__c.2023>:
  8c:	3e 20 00                                            > .

0000008f <__c.2021>:
  8f:	1b 5b 39 31 6d 00                                   .[91m.

00000095 <__c.2019>:
  95:	0d 0a 00                                            ...

00000098 <__c.2013>:
  98:	0d 0a 00                                            ...

0000009b <__c.2008>:
  9b:	0d 0a 00                                            ...

0000009e <__c.2005>:
  9e:	1b 5b 30 6d 00                                      .[0m.

000000a3 <__c.2003>:
  a3:	3e 20 00                                            > .

000000a6 <__c.2001>:
  a6:	1b 5b 39 31 6d 00                                   .[91m.

000000ac <__c.1999>:
  ac:	0d 0a 00                                            ...

000000af <__c.1997>:
  af:	41 44 43 20 76 61 6c 75 65 20 66 72 6f 6d 20 62     ADC value from b
  bf:	75 74 74 6f 6e 73 00                                uttons.

000000c6 <__c.1995>:
  c6:	1b 5b 30 6d 00                                      .[0m.

000000cb <__c.1993>:
  cb:	72 65 61 64 20 00                                   read .

000000d1 <__c.1991>:
  d1:	1b 5b 39 32 6d 00                                   .[92m.

000000d7 <__c.1989>:
  d7:	33 3a 20 00                                         3: .

000000db <__c.1987>:
  db:	0d 0a 00                                            ...

000000de <__c.1985>:
  de:	54 69 6d 65 72 2f 63 6f 75 6e 74 65 72 31 00        Timer/counter1.

000000ed <__c.1983>:
  ed:	1b 5b 30 6d 00                                      .[0m.

000000f2 <__c.1981>:
  f2:	72 65 73 65 74 20 00                                reset .

000000f9 <__c.1979>:
  f9:	1b 5b 33 31 6d 00                                   .[31m.

000000ff <__c.1977>:
  ff:	32 3a 20 00                                         2: .

00000103 <__c.1975>:
 103:	0d 0a 00                                            ...

00000106 <__c.1973>:
 106:	63 75 72 72 65 6e 74 20 54 69 6d 65 72 2f 63 6f     current Timer/co
 116:	75 6e 74 65 72 31 20 76 61 6c 75 65 00              unter1 value.

00000123 <__c.1971>:
 123:	1b 5b 30 6d 00                                      .[0m.

00000128 <__c.1969>:
 128:	72 65 61 64 20 00                                   read .

0000012e <__c.1967>:
 12e:	1b 5b 39 34 6d 00                                   .[94m.

00000134 <__c.1965>:
 134:	31 3a 20 00                                         1: .

00000138 <__c.1963>:
 138:	0d 0a 00                                            ...

0000013b <__c.1961>:
 13b:	2d 2d 2d 20 49 6e 74 65 72 61 63 74 69 76 65 20     --- Interactive 
 14b:	55 41 52 54 20 63 6f 6e 73 6f 6c 65 20 2d 2d 2d     UART console ---
	...

0000015c <__ctors_end>:
 15c:	11 24       	eor	r1, r1
 15e:	1f be       	out	0x3f, r1	; 63
 160:	cf ef       	ldi	r28, 0xFF	; 255
 162:	d8 e0       	ldi	r29, 0x08	; 8
 164:	de bf       	out	0x3e, r29	; 62
 166:	cd bf       	out	0x3d, r28	; 61

00000168 <__do_copy_data>:
 168:	11 e0       	ldi	r17, 0x01	; 1
 16a:	a0 e0       	ldi	r26, 0x00	; 0
 16c:	b1 e0       	ldi	r27, 0x01	; 1
 16e:	e8 e7       	ldi	r30, 0x78	; 120
 170:	f8 e0       	ldi	r31, 0x08	; 8
 172:	02 c0       	rjmp	.+4      	; 0x178 <__do_copy_data+0x10>
 174:	05 90       	lpm	r0, Z+
 176:	0d 92       	st	X+, r0
 178:	aa 31       	cpi	r26, 0x1A	; 26
 17a:	b1 07       	cpc	r27, r17
 17c:	d9 f7       	brne	.-10     	; 0x174 <__do_copy_data+0xc>

0000017e <__do_clear_bss>:
 17e:	21 e0       	ldi	r18, 0x01	; 1
 180:	aa e1       	ldi	r26, 0x1A	; 26
 182:	b1 e0       	ldi	r27, 0x01	; 1
 184:	01 c0       	rjmp	.+2      	; 0x188 <.do_clear_bss_start>

00000186 <.do_clear_bss_loop>:
 186:	1d 92       	st	X+, r1

00000188 <.do_clear_bss_start>:
 188:	a0 36       	cpi	r26, 0x60	; 96
 18a:	b2 07       	cpc	r27, r18
 18c:	e1 f7       	brne	.-8      	; 0x186 <.do_clear_bss_loop>
 18e:	0e 94 82 01 	call	0x304	; 0x304 <main>
 192:	0c 94 3a 04 	jmp	0x874	; 0x874 <_exit>

00000196 <__bad_interrupt>:
 196:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019a <toggle_e>:
/*************************************************************************
*  Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1 << LCD_HOME);
 19a:	29 9a       	sbi	0x05, 1	; 5
 19c:	85 e0       	ldi	r24, 0x05	; 5
 19e:	8a 95       	dec	r24
 1a0:	f1 f7       	brne	.-4      	; 0x19e <toggle_e+0x4>
 1a2:	00 00       	nop
 1a4:	29 98       	cbi	0x05, 1	; 5
 1a6:	08 95       	ret

000001a8 <lcd_write>:
 1a8:	cf 93       	push	r28
 1aa:	c8 2f       	mov	r28, r24
 1ac:	66 23       	and	r22, r22
 1ae:	11 f0       	breq	.+4      	; 0x1b4 <lcd_write+0xc>
 1b0:	28 9a       	sbi	0x05, 0	; 5
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <lcd_write+0xe>
 1b4:	28 98       	cbi	0x05, 0	; 5
 1b6:	54 9a       	sbi	0x0a, 4	; 10
 1b8:	55 9a       	sbi	0x0a, 5	; 10
 1ba:	56 9a       	sbi	0x0a, 6	; 10
 1bc:	57 9a       	sbi	0x0a, 7	; 10
 1be:	5f 98       	cbi	0x0b, 7	; 11
 1c0:	5e 98       	cbi	0x0b, 6	; 11
 1c2:	5d 98       	cbi	0x0b, 5	; 11
 1c4:	5c 98       	cbi	0x0b, 4	; 11
 1c6:	cc 23       	and	r28, r28
 1c8:	0c f4       	brge	.+2      	; 0x1cc <lcd_write+0x24>
 1ca:	5f 9a       	sbi	0x0b, 7	; 11
 1cc:	c6 fd       	sbrc	r28, 6
 1ce:	5e 9a       	sbi	0x0b, 6	; 11
 1d0:	c5 fd       	sbrc	r28, 5
 1d2:	5d 9a       	sbi	0x0b, 5	; 11
 1d4:	c4 fd       	sbrc	r28, 4
 1d6:	5c 9a       	sbi	0x0b, 4	; 11
 1d8:	0e 94 cd 00 	call	0x19a	; 0x19a <toggle_e>
 1dc:	5f 98       	cbi	0x0b, 7	; 11
 1de:	5e 98       	cbi	0x0b, 6	; 11
 1e0:	5d 98       	cbi	0x0b, 5	; 11
 1e2:	5c 98       	cbi	0x0b, 4	; 11
 1e4:	c3 fd       	sbrc	r28, 3
 1e6:	5f 9a       	sbi	0x0b, 7	; 11
 1e8:	c2 fd       	sbrc	r28, 2
 1ea:	5e 9a       	sbi	0x0b, 6	; 11
 1ec:	c1 fd       	sbrc	r28, 1
 1ee:	5d 9a       	sbi	0x0b, 5	; 11
 1f0:	c0 fd       	sbrc	r28, 0
 1f2:	5c 9a       	sbi	0x0b, 4	; 11
 1f4:	0e 94 cd 00 	call	0x19a	; 0x19a <toggle_e>
 1f8:	5c 9a       	sbi	0x0b, 4	; 11
 1fa:	5d 9a       	sbi	0x0b, 5	; 11
 1fc:	5e 9a       	sbi	0x0b, 6	; 11
 1fe:	5f 9a       	sbi	0x0b, 7	; 11
 200:	87 eb       	ldi	r24, 0xB7	; 183
 202:	9b e0       	ldi	r25, 0x0B	; 11
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <lcd_write+0x5c>
 208:	00 c0       	rjmp	.+0      	; 0x20a <lcd_write+0x62>
 20a:	00 00       	nop
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <lcd_command>:
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_write>
 216:	08 95       	ret

00000218 <lcd_gotoxy>:
 218:	61 11       	cpse	r22, r1
 21a:	04 c0       	rjmp	.+8      	; 0x224 <lcd_gotoxy+0xc>
 21c:	80 58       	subi	r24, 0x80	; 128
 21e:	0e 94 08 01 	call	0x210	; 0x210 <lcd_command>
 222:	08 95       	ret
 224:	80 54       	subi	r24, 0x40	; 64
 226:	0e 94 08 01 	call	0x210	; 0x210 <lcd_command>
 22a:	08 95       	ret

0000022c <lcd_clrscr>:
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	0e 94 08 01 	call	0x210	; 0x210 <lcd_command>
 232:	08 95       	ret

00000234 <lcd_putc>:
     *      }
     #endif
     *      lcd_waitbusy();
     #endif
     */
    lcd_write(c, 1);
 234:	61 e0       	ldi	r22, 0x01	; 1
 236:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_write>
 23a:	08 95       	ret

0000023c <lcd_puts>:
*  Input:    string to be displayed
*  Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
    register char c;

    while ( (c = *s++) )
 240:	ec 01       	movw	r28, r24
 242:	21 96       	adiw	r28, 0x01	; 1
 244:	fc 01       	movw	r30, r24
 246:	80 81       	ld	r24, Z
 248:	88 23       	and	r24, r24
 24a:	29 f0       	breq	.+10     	; 0x256 <lcd_puts+0x1a>
    {
        lcd_putc(c);
 24c:	0e 94 1a 01 	call	0x234	; 0x234 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) )
 250:	89 91       	ld	r24, Y+
 252:	81 11       	cpse	r24, r1
 254:	fb cf       	rjmp	.-10     	; 0x24c <lcd_puts+0x10>
    {
        lcd_putc(c);
    }
}/* lcd_puts */
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	08 95       	ret

0000025c <lcd_puts_p>:
*  Input:     string from program memory be be displayed
*  Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
 260:	ec 01       	movw	r28, r24
 262:	21 96       	adiw	r28, 0x01	; 1
 264:	fc 01       	movw	r30, r24
 266:	84 91       	lpm	r24, Z
 268:	88 23       	and	r24, r24
 26a:	39 f0       	breq	.+14     	; 0x27a <lcd_puts_p+0x1e>
    {
        lcd_putc(c);
 26c:	0e 94 1a 01 	call	0x234	; 0x234 <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
 270:	fe 01       	movw	r30, r28
 272:	84 91       	lpm	r24, Z
 274:	21 96       	adiw	r28, 0x01	; 1
 276:	81 11       	cpse	r24, r1
 278:	f9 cf       	rjmp	.-14     	; 0x26c <lcd_puts_p+0x10>
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret

00000280 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 280:	cf 93       	push	r28
 282:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 284:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 286:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 288:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 28a:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 28c:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 28e:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 290:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 292:	8f ef       	ldi	r24, 0xFF	; 255
 294:	99 ef       	ldi	r25, 0xF9	; 249
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <lcd_init+0x16>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <lcd_init+0x1c>
 29c:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 29e:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 2a0:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 2a2:	0e 94 cd 00 	call	0x19a	; 0x19a <toggle_e>
 2a6:	8f e1       	ldi	r24, 0x1F	; 31
 2a8:	9e e4       	ldi	r25, 0x4E	; 78
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <lcd_init+0x2a>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <lcd_init+0x30>
 2b0:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 2b2:	0e 94 cd 00 	call	0x19a	; 0x19a <toggle_e>
 2b6:	8f ef       	ldi	r24, 0xFF	; 255
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <lcd_init+0x3a>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <lcd_init+0x40>
 2c0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 2c2:	0e 94 cd 00 	call	0x19a	; 0x19a <toggle_e>
 2c6:	8f ef       	ldi	r24, 0xFF	; 255
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <lcd_init+0x4a>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <lcd_init+0x50>
 2d0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 2d2:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 2d4:	0e 94 cd 00 	call	0x19a	; 0x19a <toggle_e>
 2d8:	8f ef       	ldi	r24, 0xFF	; 255
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <lcd_init+0x5c>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <lcd_init+0x62>
 2e2:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 2e4:	88 e2       	ldi	r24, 0x28	; 40
 2e6:	0e 94 08 01 	call	0x210	; 0x210 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 2ea:	88 e0       	ldi	r24, 0x08	; 8
 2ec:	0e 94 08 01 	call	0x210	; 0x210 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 2f0:	0e 94 16 01 	call	0x22c	; 0x22c <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 2f4:	86 e0       	ldi	r24, 0x06	; 6
 2f6:	0e 94 08 01 	call	0x210	; 0x210 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 2fa:	8c 2f       	mov	r24, r28
 2fc:	0e 94 08 01 	call	0x210	; 0x210 <lcd_command>
}/* lcd_init */
 300:	cf 91       	pop	r28
 302:	08 95       	ret

00000304 <main>:
 * Purpose:  Use Timer/Counter1 and start ADC conversion four times 
 *           per second. Send value to LCD and UART.
 * Returns:  none
 **********************************************************************/
int main(void)
{
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
 308:	00 d0       	rcall	.+0      	; 0x30a <main+0x6>
 30a:	00 d0       	rcall	.+0      	; 0x30c <main+0x8>
 30c:	1f 92       	push	r1
 30e:	cd b7       	in	r28, 0x3d	; 61
 310:	de b7       	in	r29, 0x3e	; 62
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 312:	8c e0       	ldi	r24, 0x0C	; 12
 314:	0e 94 40 01 	call	0x280	; 0x280 <lcd_init>
    lcd_gotoxy(1, 0); lcd_puts("value:");
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_gotoxy>
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_puts>
    lcd_gotoxy(3, 1); lcd_puts("key:");
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	83 e0       	ldi	r24, 0x03	; 3
 32c:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_gotoxy>
 330:	87 e0       	ldi	r24, 0x07	; 7
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_puts>
    lcd_gotoxy(8, 0); lcd_puts("a");    // Put ADC value in decimal
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	88 e0       	ldi	r24, 0x08	; 8
 33c:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_gotoxy>
 340:	8c e0       	ldi	r24, 0x0C	; 12
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_puts>
    lcd_gotoxy(13,0); lcd_puts("b");    // Put ADC value in hexadecimal
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	8d e0       	ldi	r24, 0x0D	; 13
 34c:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_gotoxy>
 350:	8e e0       	ldi	r24, 0x0E	; 14
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_puts>
    lcd_gotoxy(8, 1); lcd_puts("c");    // Put button name here
 358:	61 e0       	ldi	r22, 0x01	; 1
 35a:	88 e0       	ldi	r24, 0x08	; 8
 35c:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_gotoxy>
 360:	80 e1       	ldi	r24, 0x10	; 16
 362:	91 e0       	ldi	r25, 0x01	; 1
 364:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_puts>

    // Configure ADC to convert PC0[A0] analog value
    // Set ADC reference to AVcc
	ADMUX &= ~(1<<REFS1); 
 368:	ec e7       	ldi	r30, 0x7C	; 124
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	80 81       	ld	r24, Z
 36e:	8f 77       	andi	r24, 0x7F	; 127
 370:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);
 372:	80 81       	ld	r24, Z
 374:	80 64       	ori	r24, 0x40	; 64
 376:	80 83       	st	Z, r24
    // Set input channel to ADC0
	ADMUX &= ~((1<<MUX3) | (1<<MUX2) | (1<<MUX1) | (1<<MUX0));
 378:	80 81       	ld	r24, Z
 37a:	80 7f       	andi	r24, 0xF0	; 240
 37c:	80 83       	st	Z, r24
    // Enable ADC module
	ADCSRA |= (1<<ADEN);
 37e:	ea e7       	ldi	r30, 0x7A	; 122
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	80 68       	ori	r24, 0x80	; 128
 386:	80 83       	st	Z, r24
    // Enable conversion complete interrupt
	ADCSRA |= (1<<ADIE);
 388:	80 81       	ld	r24, Z
 38a:	88 60       	ori	r24, 0x08	; 8
 38c:	80 83       	st	Z, r24
    // Set clock prescaler to 128
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 38e:	80 81       	ld	r24, Z
 390:	87 60       	ori	r24, 0x07	; 7
 392:	80 83       	st	Z, r24
    // Configure 16-bit Timer/Counter1 to start ADC conversion
    // Set prescaler to 262 ms and enable overflow interrupt
	TIM1_overflow_262ms();
 394:	e1 e8       	ldi	r30, 0x81	; 129
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	80 81       	ld	r24, Z
 39a:	8b 7f       	andi	r24, 0xFB	; 251
 39c:	80 83       	st	Z, r24
 39e:	80 81       	ld	r24, Z
 3a0:	83 60       	ori	r24, 0x03	; 3
 3a2:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 3a4:	ef e6       	ldi	r30, 0x6F	; 111
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	80 81       	ld	r24, Z
 3aa:	81 60       	ori	r24, 0x01	; 1
 3ac:	80 83       	st	Z, r24
    // Initialize UART to asynchronous, 8N1, 9600
	uart_init(UART_BAUD_SELECT(9600, 16000000UL));
 3ae:	87 e6       	ldi	r24, 0x67	; 103
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 98 03 	call	0x730	; 0x730 <uart_init>
    // Enables interrupts by setting the global interrupt mask
    sei();
 3b6:	78 94       	sei

	uart_puts_P("--- Interactive UART console ---"); uart_puts_P("\r\n");
 3b8:	8b e3       	ldi	r24, 0x3B	; 59
 3ba:	91 e0       	ldi	r25, 0x01	; 1
 3bc:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <uart_puts_p>
 3c0:	88 e3       	ldi	r24, 0x38	; 56
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <uart_puts_p>
	uart_puts_P("1: ");
 3c8:	84 e3       	ldi	r24, 0x34	; 52
 3ca:	91 e0       	ldi	r25, 0x01	; 1
 3cc:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <uart_puts_p>
	uart_puts_P("\033[94m"); uart_puts_P("read "); 
 3d0:	8e e2       	ldi	r24, 0x2E	; 46
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <uart_puts_p>
 3d8:	88 e2       	ldi	r24, 0x28	; 40
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <uart_puts_p>
	uart_puts_P("\033[0m"); uart_puts_P("current Timer/counter1 value"); uart_puts_P("\r\n");
 3e0:	83 e2       	ldi	r24, 0x23	; 35
 3e2:	91 e0       	ldi	r25, 0x01	; 1
 3e4:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <uart_puts_p>
 3e8:	86 e0       	ldi	r24, 0x06	; 6
 3ea:	91 e0       	ldi	r25, 0x01	; 1
 3ec:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <uart_puts_p>
 3f0:	83 e0       	ldi	r24, 0x03	; 3
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <uart_puts_p>
	uart_puts_P("2: ");
 3f8:	8f ef       	ldi	r24, 0xFF	; 255
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <uart_puts_p>
	uart_puts_P("\033[31m"); uart_puts_P("reset ");
 400:	89 ef       	ldi	r24, 0xF9	; 249
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <uart_puts_p>
 408:	82 ef       	ldi	r24, 0xF2	; 242
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <uart_puts_p>
	uart_puts_P("\033[0m"); uart_puts_P("Timer/counter1"); uart_puts_P("\r\n");
 410:	8d ee       	ldi	r24, 0xED	; 237
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <uart_puts_p>
 418:	8e ed       	ldi	r24, 0xDE	; 222
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <uart_puts_p>
 420:	8b ed       	ldi	r24, 0xDB	; 219
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <uart_puts_p>
	uart_puts_P("3: ");
 428:	87 ed       	ldi	r24, 0xD7	; 215
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <uart_puts_p>
	uart_puts_P("\033[92m"); uart_puts_P("read ");
 430:	81 ed       	ldi	r24, 0xD1	; 209
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <uart_puts_p>
 438:	8b ec       	ldi	r24, 0xCB	; 203
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <uart_puts_p>
	uart_puts_P("\033[0m"); uart_puts_P("ADC value from buttons"); uart_puts_P("\r\n");
 440:	86 ec       	ldi	r24, 0xC6	; 198
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <uart_puts_p>
 448:	8f ea       	ldi	r24, 0xAF	; 175
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <uart_puts_p>
 450:	8c ea       	ldi	r24, 0xAC	; 172
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <uart_puts_p>
	uart_puts_P("\033[91m"); uart_puts_P("> "); uart_puts_P("\033[0m");
 458:	86 ea       	ldi	r24, 0xA6	; 166
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <uart_puts_p>
 460:	83 ea       	ldi	r24, 0xA3	; 163
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <uart_puts_p>
 468:	8e e9       	ldi	r24, 0x9E	; 158
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <uart_puts_p>
			uart_putc(c); uart_puts_P("\r\n");
			switch (c) {
				case '1': ;
					char str[5];
					cli();
					int16_t temp = TCNT1;
 470:	0f 2e       	mov	r0, r31
 472:	f4 e8       	ldi	r31, 0x84	; 132
 474:	ef 2e       	mov	r14, r31
 476:	f1 2c       	mov	r15, r1
 478:	f0 2d       	mov	r31, r0
	uart_puts_P("\033[91m"); uart_puts_P("> "); uart_puts_P("\033[0m");

    // Infinite loop
    while (1)
    {
		uint8_t c = uart_getc();
 47a:	0e 94 b1 03 	call	0x762	; 0x762 <uart_getc>
 47e:	18 2f       	mov	r17, r24
		if (c != '\0')
 480:	88 23       	and	r24, r24
 482:	d9 f3       	breq	.-10     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
		{
			uart_putc(c); uart_puts_P("\r\n");
 484:	0e 94 cf 03 	call	0x79e	; 0x79e <uart_putc>
 488:	8b e9       	ldi	r24, 0x9B	; 155
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <uart_puts_p>
			switch (c) {
 490:	11 33       	cpi	r17, 0x31	; 49
 492:	99 f4       	brne	.+38     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
				case '1': ;
					char str[5];
					cli();
 494:	f8 94       	cli
					int16_t temp = TCNT1;
 496:	f7 01       	movw	r30, r14
 498:	80 81       	ld	r24, Z
 49a:	91 81       	ldd	r25, Z+1	; 0x01
					sei();
 49c:	78 94       	sei
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 49e:	4a e0       	ldi	r20, 0x0A	; 10
 4a0:	be 01       	movw	r22, r28
 4a2:	6f 5f       	subi	r22, 0xFF	; 255
 4a4:	7f 4f       	sbci	r23, 0xFF	; 255
 4a6:	0e 94 05 04 	call	0x80a	; 0x80a <__itoa_ncheck>
					itoa(temp, str, 10);
					uart_puts(str); uart_puts_P("\r\n");
 4aa:	ce 01       	movw	r24, r28
 4ac:	01 96       	adiw	r24, 0x01	; 1
 4ae:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <uart_puts>
 4b2:	88 e9       	ldi	r24, 0x98	; 152
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <uart_puts_p>
				
					break;
				default:
					break;
			}
			uart_puts_P("\r\n"); uart_puts_P("\033[91m"); uart_puts_P("> "); uart_puts_P("\033[0m");
 4ba:	85 e9       	ldi	r24, 0x95	; 149
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <uart_puts_p>
 4c2:	8f e8       	ldi	r24, 0x8F	; 143
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <uart_puts_p>
 4ca:	8c e8       	ldi	r24, 0x8C	; 140
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <uart_puts_p>
 4d2:	87 e8       	ldi	r24, 0x87	; 135
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <uart_puts_p>
 4da:	cf cf       	rjmp	.-98     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>

000004dc <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Use single conversion mode and start conversion four times
 *           per second.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 4dc:	1f 92       	push	r1
 4de:	0f 92       	push	r0
 4e0:	0f b6       	in	r0, 0x3f	; 63
 4e2:	0f 92       	push	r0
 4e4:	11 24       	eor	r1, r1
 4e6:	8f 93       	push	r24
 4e8:	ef 93       	push	r30
 4ea:	ff 93       	push	r31
    // Start ADC conversion
	ADCSRA |= (1<<ADSC);
 4ec:	ea e7       	ldi	r30, 0x7A	; 122
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	80 81       	ld	r24, Z
 4f2:	80 64       	ori	r24, 0x40	; 64
 4f4:	80 83       	st	Z, r24
}
 4f6:	ff 91       	pop	r31
 4f8:	ef 91       	pop	r30
 4fa:	8f 91       	pop	r24
 4fc:	0f 90       	pop	r0
 4fe:	0f be       	out	0x3f, r0	; 63
 500:	0f 90       	pop	r0
 502:	1f 90       	pop	r1
 504:	18 95       	reti

00000506 <__vector_21>:
/**********************************************************************
 * Function: ADC complete interrupt
 * Purpose:  Display value on LCD and send it to UART.
 **********************************************************************/
ISR(ADC_vect)
{
 506:	1f 92       	push	r1
 508:	0f 92       	push	r0
 50a:	0f b6       	in	r0, 0x3f	; 63
 50c:	0f 92       	push	r0
 50e:	11 24       	eor	r1, r1
 510:	0f 93       	push	r16
 512:	1f 93       	push	r17
 514:	2f 93       	push	r18
 516:	3f 93       	push	r19
 518:	4f 93       	push	r20
 51a:	5f 93       	push	r21
 51c:	6f 93       	push	r22
 51e:	7f 93       	push	r23
 520:	8f 93       	push	r24
 522:	9f 93       	push	r25
 524:	af 93       	push	r26
 526:	bf 93       	push	r27
 528:	ef 93       	push	r30
 52a:	ff 93       	push	r31
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	00 d0       	rcall	.+0      	; 0x532 <__vector_21+0x2c>
 532:	00 d0       	rcall	.+0      	; 0x534 <__vector_21+0x2e>
 534:	cd b7       	in	r28, 0x3d	; 61
 536:	de b7       	in	r29, 0x3e	; 62
	uint16_t adc = ADC;		// Read ADC value from register
 538:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 53c:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	char str[4] = "    ";	// Initialize char array for int2char conversion
 540:	80 e2       	ldi	r24, 0x20	; 32
 542:	90 e2       	ldi	r25, 0x20	; 32
 544:	9a 83       	std	Y+2, r25	; 0x02
 546:	89 83       	std	Y+1, r24	; 0x01
 548:	9c 83       	std	Y+4, r25	; 0x04
 54a:	8b 83       	std	Y+3, r24	; 0x03
 54c:	4a e0       	ldi	r20, 0x0A	; 10
 54e:	be 01       	movw	r22, r28
 550:	6f 5f       	subi	r22, 0xFF	; 255
 552:	7f 4f       	sbci	r23, 0xFF	; 255
 554:	c8 01       	movw	r24, r16
 556:	0e 94 05 04 	call	0x80a	; 0x80a <__itoa_ncheck>
	itoa(adc, str, 10);		// Convert int to decimal char array
	lcd_gotoxy(8, 0); lcd_puts("    ");		// LCD draw decimal value
 55a:	60 e0       	ldi	r22, 0x00	; 0
 55c:	88 e0       	ldi	r24, 0x08	; 8
 55e:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_gotoxy>
 562:	84 e1       	ldi	r24, 0x14	; 20
 564:	91 e0       	ldi	r25, 0x01	; 1
 566:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_puts>
	lcd_gotoxy(8, 0); lcd_puts(str);
 56a:	60 e0       	ldi	r22, 0x00	; 0
 56c:	88 e0       	ldi	r24, 0x08	; 8
 56e:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_gotoxy>
 572:	ce 01       	movw	r24, r28
 574:	01 96       	adiw	r24, 0x01	; 1
 576:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_puts>
 57a:	40 e1       	ldi	r20, 0x10	; 16
 57c:	be 01       	movw	r22, r28
 57e:	6f 5f       	subi	r22, 0xFF	; 255
 580:	7f 4f       	sbci	r23, 0xFF	; 255
 582:	c8 01       	movw	r24, r16
 584:	0e 94 05 04 	call	0x80a	; 0x80a <__itoa_ncheck>
	itoa(adc, str, 16);
	lcd_gotoxy(13, 0); lcd_puts("   ");		// LCD draw hexadecimal value
 588:	60 e0       	ldi	r22, 0x00	; 0
 58a:	8d e0       	ldi	r24, 0x0D	; 13
 58c:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_gotoxy>
 590:	85 e1       	ldi	r24, 0x15	; 21
 592:	91 e0       	ldi	r25, 0x01	; 1
 594:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_puts>
	lcd_gotoxy(13, 0); lcd_puts(str);
 598:	60 e0       	ldi	r22, 0x00	; 0
 59a:	8d e0       	ldi	r24, 0x0D	; 13
 59c:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_gotoxy>
 5a0:	ce 01       	movw	r24, r28
 5a2:	01 96       	adiw	r24, 0x01	; 1
 5a4:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_puts>
	lcd_gotoxy(8, 1); lcd_puts("      ");	// LCD clean button name area
 5a8:	61 e0       	ldi	r22, 0x01	; 1
 5aa:	88 e0       	ldi	r24, 0x08	; 8
 5ac:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_gotoxy>
 5b0:	82 e1       	ldi	r24, 0x12	; 18
 5b2:	91 e0       	ldi	r25, 0x01	; 1
 5b4:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_puts>
	lcd_gotoxy(8, 1);
 5b8:	61 e0       	ldi	r22, 0x01	; 1
 5ba:	88 e0       	ldi	r24, 0x08	; 8
 5bc:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_gotoxy>
	if (adc < 50)	// Right (btn = 1)
 5c0:	02 33       	cpi	r16, 0x32	; 50
 5c2:	11 05       	cpc	r17, r1
 5c4:	40 f4       	brcc	.+16     	; 0x5d6 <__vector_21+0xd0>
	{
		btn = 1;
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
		lcd_puts_P("Right");
 5cc:	81 e8       	ldi	r24, 0x81	; 129
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_puts_p>
 5d4:	3c c0       	rjmp	.+120    	; 0x64e <__vector_21+0x148>
	}
	else if (adc > 51 && adc < 170)	// Up (btn = 2)
 5d6:	c8 01       	movw	r24, r16
 5d8:	c4 97       	sbiw	r24, 0x34	; 52
 5da:	86 37       	cpi	r24, 0x76	; 118
 5dc:	91 05       	cpc	r25, r1
 5de:	40 f4       	brcc	.+16     	; 0x5f0 <__vector_21+0xea>
	{
		btn = 2;
 5e0:	82 e0       	ldi	r24, 0x02	; 2
 5e2:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
		lcd_puts_P("Up");
 5e6:	8e e7       	ldi	r24, 0x7E	; 126
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_puts_p>
 5ee:	2f c0       	rjmp	.+94     	; 0x64e <__vector_21+0x148>
	}
	else if (adc > 171 && adc < 320) // Down (btn = 3)
 5f0:	c8 01       	movw	r24, r16
 5f2:	8c 5a       	subi	r24, 0xAC	; 172
 5f4:	91 09       	sbc	r25, r1
 5f6:	84 39       	cpi	r24, 0x94	; 148
 5f8:	91 05       	cpc	r25, r1
 5fa:	40 f4       	brcc	.+16     	; 0x60c <__vector_21+0x106>
	{
		btn = 3;
 5fc:	83 e0       	ldi	r24, 0x03	; 3
 5fe:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
		lcd_puts_P("Down");
 602:	89 e7       	ldi	r24, 0x79	; 121
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_puts_p>
 60a:	21 c0       	rjmp	.+66     	; 0x64e <__vector_21+0x148>
	}
	else if (adc > 321 && adc < 520) // Left (btn = 4)
 60c:	c8 01       	movw	r24, r16
 60e:	82 54       	subi	r24, 0x42	; 66
 610:	91 40       	sbci	r25, 0x01	; 1
 612:	86 3c       	cpi	r24, 0xC6	; 198
 614:	91 05       	cpc	r25, r1
 616:	40 f4       	brcc	.+16     	; 0x628 <__vector_21+0x122>
	{
		btn = 4;
 618:	84 e0       	ldi	r24, 0x04	; 4
 61a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
		lcd_puts_P("Left");
 61e:	84 e7       	ldi	r24, 0x74	; 116
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_puts_p>
 626:	13 c0       	rjmp	.+38     	; 0x64e <__vector_21+0x148>
	}
	else if (adc > 521 && adc < 800) // Select (btn = 5)
 628:	0a 50       	subi	r16, 0x0A	; 10
 62a:	12 40       	sbci	r17, 0x02	; 2
 62c:	06 31       	cpi	r16, 0x16	; 22
 62e:	11 40       	sbci	r17, 0x01	; 1
 630:	40 f4       	brcc	.+16     	; 0x642 <__vector_21+0x13c>
	{
		btn = 5;
 632:	85 e0       	ldi	r24, 0x05	; 5
 634:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
		lcd_puts_P("Select");
 638:	8d e6       	ldi	r24, 0x6D	; 109
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_puts_p>
 640:	06 c0       	rjmp	.+12     	; 0x64e <__vector_21+0x148>
	}
	else // none (btn = 0)
	{
		btn = 0;
 642:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
		lcd_puts_P("none");
 646:	88 e6       	ldi	r24, 0x68	; 104
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_puts_p>
	}
 64e:	0f 90       	pop	r0
 650:	0f 90       	pop	r0
 652:	0f 90       	pop	r0
 654:	0f 90       	pop	r0
 656:	df 91       	pop	r29
 658:	cf 91       	pop	r28
 65a:	ff 91       	pop	r31
 65c:	ef 91       	pop	r30
 65e:	bf 91       	pop	r27
 660:	af 91       	pop	r26
 662:	9f 91       	pop	r25
 664:	8f 91       	pop	r24
 666:	7f 91       	pop	r23
 668:	6f 91       	pop	r22
 66a:	5f 91       	pop	r21
 66c:	4f 91       	pop	r20
 66e:	3f 91       	pop	r19
 670:	2f 91       	pop	r18
 672:	1f 91       	pop	r17
 674:	0f 91       	pop	r16
 676:	0f 90       	pop	r0
 678:	0f be       	out	0x3f, r0	; 63
 67a:	0f 90       	pop	r0
 67c:	1f 90       	pop	r1
 67e:	18 95       	reti

00000680 <__vector_18>:

/*************************************************************************
 * Function: UART Receive Complete interrupt
 * Purpose:  called when the UART has received a character
 **************************************************************************/
{
 680:	1f 92       	push	r1
 682:	0f 92       	push	r0
 684:	0f b6       	in	r0, 0x3f	; 63
 686:	0f 92       	push	r0
 688:	11 24       	eor	r1, r1
 68a:	2f 93       	push	r18
 68c:	8f 93       	push	r24
 68e:	9f 93       	push	r25
 690:	ef 93       	push	r30
 692:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError = 0;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 694:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    data = UART0_DATA;
 698:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    #if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE) | _BV(DOR) | _BV(UPE) );
    #elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0) | _BV(DOR0) | _BV(UPE0) );
 69c:	8c 71       	andi	r24, 0x1C	; 28
    #elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE) | _BV(DOR) );
    #endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 69e:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <UART_RxHead>
 6a2:	ef 5f       	subi	r30, 0xFF	; 255
 6a4:	ef 71       	andi	r30, 0x1F	; 31

    if (tmphead == UART_RxTail)
 6a6:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <UART_RxTail>
 6aa:	e9 17       	cp	r30, r25
 6ac:	39 f0       	breq	.+14     	; 0x6bc <__vector_18+0x3c>
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }
    else
    {
        /* store new index */
        UART_RxHead = tmphead;
 6ae:	e0 93 1d 01 	sts	0x011D, r30	; 0x80011d <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	e0 5e       	subi	r30, 0xE0	; 224
 6b6:	fe 4f       	sbci	r31, 0xFE	; 254
 6b8:	20 83       	st	Z, r18
 6ba:	01 c0       	rjmp	.+2      	; 0x6be <__vector_18+0x3e>
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;

    if (tmphead == UART_RxTail)
    {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 6bc:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;
 6be:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <UART_LastRxError>
 6c2:	89 2b       	or	r24, r25
 6c4:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <UART_LastRxError>
}
 6c8:	ff 91       	pop	r31
 6ca:	ef 91       	pop	r30
 6cc:	9f 91       	pop	r25
 6ce:	8f 91       	pop	r24
 6d0:	2f 91       	pop	r18
 6d2:	0f 90       	pop	r0
 6d4:	0f be       	out	0x3f, r0	; 63
 6d6:	0f 90       	pop	r0
 6d8:	1f 90       	pop	r1
 6da:	18 95       	reti

000006dc <__vector_19>:

/*************************************************************************
 * Function: UART Data Register Empty interrupt
 * Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
 6dc:	1f 92       	push	r1
 6de:	0f 92       	push	r0
 6e0:	0f b6       	in	r0, 0x3f	; 63
 6e2:	0f 92       	push	r0
 6e4:	11 24       	eor	r1, r1
 6e6:	8f 93       	push	r24
 6e8:	9f 93       	push	r25
 6ea:	ef 93       	push	r30
 6ec:	ff 93       	push	r31
    unsigned char tmptail;


    if (UART_TxHead != UART_TxTail)
 6ee:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <UART_TxHead>
 6f2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <UART_TxTail>
 6f6:	98 17       	cp	r25, r24
 6f8:	69 f0       	breq	.+26     	; 0x714 <__vector_19+0x38>
    {
        /* calculate and store new buffer index */
        tmptail     = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 6fa:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <UART_TxTail>
 6fe:	ef 5f       	subi	r30, 0xFF	; 255
 700:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 702:	e0 93 1e 01 	sts	0x011E, r30	; 0x80011e <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
 706:	f0 e0       	ldi	r31, 0x00	; 0
 708:	e0 5c       	subi	r30, 0xC0	; 192
 70a:	fe 4f       	sbci	r31, 0xFE	; 254
 70c:	80 81       	ld	r24, Z
 70e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 712:	05 c0       	rjmp	.+10     	; 0x71e <__vector_19+0x42>
    }
    else
    {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 714:	e1 ec       	ldi	r30, 0xC1	; 193
 716:	f0 e0       	ldi	r31, 0x00	; 0
 718:	80 81       	ld	r24, Z
 71a:	8f 7d       	andi	r24, 0xDF	; 223
 71c:	80 83       	st	Z, r24
    }
}
 71e:	ff 91       	pop	r31
 720:	ef 91       	pop	r30
 722:	9f 91       	pop	r25
 724:	8f 91       	pop	r24
 726:	0f 90       	pop	r0
 728:	0f be       	out	0x3f, r0	; 63
 72a:	0f 90       	pop	r0
 72c:	1f 90       	pop	r1
 72e:	18 95       	reti

00000730 <uart_init>:
 * Input:    baudrate using macro UART_BAUD_SELECT()
 * Returns:  none
 **************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 730:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <UART_TxHead>
    UART_TxTail = 0;
 734:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <UART_TxTail>
    UART_RxHead = 0;
 738:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <UART_RxHead>
    UART_RxTail = 0;
 73c:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <UART_RxTail>
    #  endif
    # endif
    #endif /* ifdef UART_TEST */

    /* Set baud rate */
    if (baudrate & 0x8000)
 740:	99 23       	and	r25, r25
 742:	1c f4       	brge	.+6      	; 0x74a <uart_init+0x1a>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1 << UART0_BIT_U2X); // Enable 2x speed
 744:	22 e0       	ldi	r18, 0x02	; 2
 746:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
        #endif
    }
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char) ((baudrate >> 8) & 0x80);
 74a:	90 78       	andi	r25, 0x80	; 128
 74c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    #endif
    UART0_UBRRL = (unsigned char) (baudrate & 0x00FF);
 750:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE) | (1 << UART0_BIT_RXEN) | (1 << UART0_BIT_TXEN);
 754:	88 e9       	ldi	r24, 0x98	; 152
 756:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    # ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1 << UART0_BIT_URSEL) | (1 << UART0_BIT_UCSZ1) | (1 << UART0_BIT_UCSZ0);
    # else
    UART0_CONTROLC = (1 << UART0_BIT_UCSZ1) | (1 << UART0_BIT_UCSZ0);
 75a:	86 e0       	ldi	r24, 0x06	; 6
 75c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 760:	08 95       	ret

00000762 <uart_getc>:
    unsigned char tmptail;
    unsigned char data;
    unsigned char lastRxError;


    if (UART_RxHead == UART_RxTail)
 762:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <UART_RxHead>
 766:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <UART_RxTail>
 76a:	98 17       	cp	r25, r24
 76c:	a9 f0       	breq	.+42     	; 0x798 <uart_getc+0x36>
    {
        return UART_NO_DATA; /* no data available */
    }

    /* calculate buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 76e:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <UART_RxTail>
 772:	9f 5f       	subi	r25, 0xFF	; 255
 774:	9f 71       	andi	r25, 0x1F	; 31

    /* get data from receive buffer */
    data        = UART_RxBuf[tmptail];
 776:	e9 2f       	mov	r30, r25
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	e0 5e       	subi	r30, 0xE0	; 224
 77c:	fe 4f       	sbci	r31, 0xFE	; 254
 77e:	20 81       	ld	r18, Z
    lastRxError = UART_LastRxError;
 780:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <UART_LastRxError>

    /* store buffer index */
    UART_RxTail = tmptail;
 784:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <UART_RxTail>

    UART_LastRxError = 0;
 788:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <UART_LastRxError>
    return (lastRxError << 8) + data;
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	98 2f       	mov	r25, r24
 790:	88 27       	eor	r24, r24
 792:	82 0f       	add	r24, r18
 794:	91 1d       	adc	r25, r1
 796:	08 95       	ret
    unsigned char lastRxError;


    if (UART_RxHead == UART_RxTail)
    {
        return UART_NO_DATA; /* no data available */
 798:	80 e0       	ldi	r24, 0x00	; 0
 79a:	91 e0       	ldi	r25, 0x01	; 1
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 79c:	08 95       	ret

0000079e <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 79e:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <UART_TxHead>
 7a2:	2f 5f       	subi	r18, 0xFF	; 255
 7a4:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 7a6:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <UART_TxTail>
 7aa:	29 17       	cp	r18, r25
 7ac:	e1 f3       	breq	.-8      	; 0x7a6 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 7ae:	e2 2f       	mov	r30, r18
 7b0:	f0 e0       	ldi	r31, 0x00	; 0
 7b2:	e0 5c       	subi	r30, 0xC0	; 192
 7b4:	fe 4f       	sbci	r31, 0xFE	; 254
 7b6:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 7b8:	20 93 1f 01 	sts	0x011F, r18	; 0x80011f <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 7bc:	e1 ec       	ldi	r30, 0xC1	; 193
 7be:	f0 e0       	ldi	r31, 0x00	; 0
 7c0:	80 81       	ld	r24, Z
 7c2:	80 62       	ori	r24, 0x20	; 32
 7c4:	80 83       	st	Z, r24
 7c6:	08 95       	ret

000007c8 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 7c8:	cf 93       	push	r28
 7ca:	df 93       	push	r29
 7cc:	ec 01       	movw	r28, r24
    while (*s)
 7ce:	88 81       	ld	r24, Y
 7d0:	88 23       	and	r24, r24
 7d2:	31 f0       	breq	.+12     	; 0x7e0 <uart_puts+0x18>
 7d4:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 7d6:	0e 94 cf 03 	call	0x79e	; 0x79e <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 7da:	89 91       	ld	r24, Y+
 7dc:	81 11       	cpse	r24, r1
 7de:	fb cf       	rjmp	.-10     	; 0x7d6 <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 7e0:	df 91       	pop	r29
 7e2:	cf 91       	pop	r28
 7e4:	08 95       	ret

000007e6 <uart_puts_p>:
 * Purpose:  transmit string from program memory to UART
 * Input:    program memory string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s)
{
 7e6:	cf 93       	push	r28
 7e8:	df 93       	push	r29
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
 7ea:	ec 01       	movw	r28, r24
 7ec:	21 96       	adiw	r28, 0x01	; 1
 7ee:	fc 01       	movw	r30, r24
 7f0:	84 91       	lpm	r24, Z
 7f2:	88 23       	and	r24, r24
 7f4:	39 f0       	breq	.+14     	; 0x804 <uart_puts_p+0x1e>
        uart_putc(c);
 7f6:	0e 94 cf 03 	call	0x79e	; 0x79e <uart_putc>
 **************************************************************************/
void uart_puts_p(const char *progmem_s)
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
 7fa:	fe 01       	movw	r30, r28
 7fc:	84 91       	lpm	r24, Z
 7fe:	21 96       	adiw	r28, 0x01	; 1
 800:	81 11       	cpse	r24, r1
 802:	f9 cf       	rjmp	.-14     	; 0x7f6 <uart_puts_p+0x10>
        uart_putc(c);
}/* uart_puts_p */
 804:	df 91       	pop	r29
 806:	cf 91       	pop	r28
 808:	08 95       	ret

0000080a <__itoa_ncheck>:
 80a:	bb 27       	eor	r27, r27
 80c:	4a 30       	cpi	r20, 0x0A	; 10
 80e:	31 f4       	brne	.+12     	; 0x81c <__itoa_ncheck+0x12>
 810:	99 23       	and	r25, r25
 812:	22 f4       	brpl	.+8      	; 0x81c <__itoa_ncheck+0x12>
 814:	bd e2       	ldi	r27, 0x2D	; 45
 816:	90 95       	com	r25
 818:	81 95       	neg	r24
 81a:	9f 4f       	sbci	r25, 0xFF	; 255
 81c:	0c 94 11 04 	jmp	0x822	; 0x822 <__utoa_common>

00000820 <__utoa_ncheck>:
 820:	bb 27       	eor	r27, r27

00000822 <__utoa_common>:
 822:	fb 01       	movw	r30, r22
 824:	55 27       	eor	r21, r21
 826:	aa 27       	eor	r26, r26
 828:	88 0f       	add	r24, r24
 82a:	99 1f       	adc	r25, r25
 82c:	aa 1f       	adc	r26, r26
 82e:	a4 17       	cp	r26, r20
 830:	10 f0       	brcs	.+4      	; 0x836 <__utoa_common+0x14>
 832:	a4 1b       	sub	r26, r20
 834:	83 95       	inc	r24
 836:	50 51       	subi	r21, 0x10	; 16
 838:	b9 f7       	brne	.-18     	; 0x828 <__utoa_common+0x6>
 83a:	a0 5d       	subi	r26, 0xD0	; 208
 83c:	aa 33       	cpi	r26, 0x3A	; 58
 83e:	08 f0       	brcs	.+2      	; 0x842 <__utoa_common+0x20>
 840:	a9 5d       	subi	r26, 0xD9	; 217
 842:	a1 93       	st	Z+, r26
 844:	00 97       	sbiw	r24, 0x00	; 0
 846:	79 f7       	brne	.-34     	; 0x826 <__utoa_common+0x4>
 848:	b1 11       	cpse	r27, r1
 84a:	b1 93       	st	Z+, r27
 84c:	11 92       	st	Z+, r1
 84e:	cb 01       	movw	r24, r22
 850:	0c 94 2a 04 	jmp	0x854	; 0x854 <strrev>

00000854 <strrev>:
 854:	dc 01       	movw	r26, r24
 856:	fc 01       	movw	r30, r24
 858:	67 2f       	mov	r22, r23
 85a:	71 91       	ld	r23, Z+
 85c:	77 23       	and	r23, r23
 85e:	e1 f7       	brne	.-8      	; 0x858 <strrev+0x4>
 860:	32 97       	sbiw	r30, 0x02	; 2
 862:	04 c0       	rjmp	.+8      	; 0x86c <strrev+0x18>
 864:	7c 91       	ld	r23, X
 866:	6d 93       	st	X+, r22
 868:	70 83       	st	Z, r23
 86a:	62 91       	ld	r22, -Z
 86c:	ae 17       	cp	r26, r30
 86e:	bf 07       	cpc	r27, r31
 870:	c8 f3       	brcs	.-14     	; 0x864 <strrev+0x10>
 872:	08 95       	ret

00000874 <_exit>:
 874:	f8 94       	cli

00000876 <__stop_program>:
 876:	ff cf       	rjmp	.-2      	; 0x876 <__stop_program>
