
02-leds_knightRider.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000001a0  00000214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000021a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000078b  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069b  00000000  00000000  00000a37  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b4  00000000  00000000  000010d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001388  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c5  00000000  00000000  000013bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f7  00000000  00000000  00001781  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001878  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ea       	ldi	r30, 0xA0	; 160
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/sfr_defs.h>

int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	00 d0       	rcall	.+0      	; 0x9c <main+0x6>
  9c:	00 d0       	rcall	.+0      	; 0x9e <main+0x8>
  9e:	1f 92       	push	r1
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
    DDRB |= (1<<LED_1) | (1<<LED_2) | (1<<LED_3) | (1<<LED_4) | (1<<LED_5);
  a4:	84 b1       	in	r24, 0x04	; 4
  a6:	8f 61       	ori	r24, 0x1F	; 31
  a8:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~((1<<LED_1) | (1<<LED_2) | (1<<LED_3) | (1<<LED_4) | (1<<LED_5));
  aa:	85 b1       	in	r24, 0x05	; 5
  ac:	80 7e       	andi	r24, 0xE0	; 224
  ae:	85 b9       	out	0x05, r24	; 5
	uint8_t led[] = {LED_1, LED_2, LED_3,LED_4, LED_5};
  b0:	85 e0       	ldi	r24, 0x05	; 5
  b2:	e0 e0       	ldi	r30, 0x00	; 0
  b4:	f1 e0       	ldi	r31, 0x01	; 1
  b6:	de 01       	movw	r26, r28
  b8:	11 96       	adiw	r26, 0x01	; 1
  ba:	01 90       	ld	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	8a 95       	dec	r24
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x24>
    while (1) 
    {
		for(uint8_t i = 0; i != 5; i++){
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	32 c0       	rjmp	.+100    	; 0x12a <main+0x94>
			PORTB |= (1<<led[i]);
  c6:	55 b1       	in	r21, 0x05	; 5
  c8:	84 2f       	mov	r24, r20
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	e1 e0       	ldi	r30, 0x01	; 1
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	ec 0f       	add	r30, r28
  d2:	fd 1f       	adc	r31, r29
  d4:	e8 0f       	add	r30, r24
  d6:	f9 1f       	adc	r31, r25
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	00 80       	ld	r0, Z
  de:	02 c0       	rjmp	.+4      	; 0xe4 <main+0x4e>
  e0:	22 0f       	add	r18, r18
  e2:	33 1f       	adc	r19, r19
  e4:	0a 94       	dec	r0
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <main+0x4a>
  e8:	25 2b       	or	r18, r21
  ea:	25 b9       	out	0x05, r18	; 5
			if (i != 0){
  ec:	44 23       	and	r20, r20
  ee:	e1 f0       	breq	.+56     	; 0x128 <main+0x92>
				PORTB &= ~(1<<led[i-1]);
  f0:	25 b1       	in	r18, 0x05	; 5
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	e1 e0       	ldi	r30, 0x01	; 1
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	ec 0f       	add	r30, r28
  fa:	fd 1f       	adc	r31, r29
  fc:	e8 0f       	add	r30, r24
  fe:	f9 1f       	adc	r31, r25
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	00 80       	ld	r0, Z
 106:	02 c0       	rjmp	.+4      	; 0x10c <main+0x76>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	0a 94       	dec	r0
 10e:	e2 f7       	brpl	.-8      	; 0x108 <main+0x72>
 110:	80 95       	com	r24
 112:	82 23       	and	r24, r18
 114:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	82 e5       	ldi	r24, 0x52	; 82
 11a:	97 e0       	ldi	r25, 0x07	; 7
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x86>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x90>
 126:	00 00       	nop
    DDRB |= (1<<LED_1) | (1<<LED_2) | (1<<LED_3) | (1<<LED_4) | (1<<LED_5);
	PORTB &= ~((1<<LED_1) | (1<<LED_2) | (1<<LED_3) | (1<<LED_4) | (1<<LED_5));
	uint8_t led[] = {LED_1, LED_2, LED_3,LED_4, LED_5};
    while (1) 
    {
		for(uint8_t i = 0; i != 5; i++){
 128:	4f 5f       	subi	r20, 0xFF	; 255
 12a:	45 30       	cpi	r20, 0x05	; 5
 12c:	61 f6       	brne	.-104    	; 0xc6 <main+0x30>
 12e:	44 e0       	ldi	r20, 0x04	; 4
 130:	32 c0       	rjmp	.+100    	; 0x196 <main+0x100>
				PORTB &= ~(1<<led[i-1]);
 				_delay_ms(DELAY);
			}
		}
		for(uint8_t i = 4; i != 255; --i){
			PORTB |= (1<<led[i]);
 132:	55 b1       	in	r21, 0x05	; 5
 134:	84 2f       	mov	r24, r20
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	e1 e0       	ldi	r30, 0x01	; 1
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	ec 0f       	add	r30, r28
 13e:	fd 1f       	adc	r31, r29
 140:	e8 0f       	add	r30, r24
 142:	f9 1f       	adc	r31, r25
 144:	21 e0       	ldi	r18, 0x01	; 1
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	00 80       	ld	r0, Z
 14a:	02 c0       	rjmp	.+4      	; 0x150 <main+0xba>
 14c:	22 0f       	add	r18, r18
 14e:	33 1f       	adc	r19, r19
 150:	0a 94       	dec	r0
 152:	e2 f7       	brpl	.-8      	; 0x14c <main+0xb6>
 154:	25 2b       	or	r18, r21
 156:	25 b9       	out	0x05, r18	; 5
			if (i != 4){
 158:	44 30       	cpi	r20, 0x04	; 4
 15a:	e1 f0       	breq	.+56     	; 0x194 <main+0xfe>
				PORTB &= ~(1<<led[i+1]);
 15c:	25 b1       	in	r18, 0x05	; 5
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	e1 e0       	ldi	r30, 0x01	; 1
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	ec 0f       	add	r30, r28
 166:	fd 1f       	adc	r31, r29
 168:	e8 0f       	add	r30, r24
 16a:	f9 1f       	adc	r31, r25
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	00 80       	ld	r0, Z
 172:	02 c0       	rjmp	.+4      	; 0x178 <main+0xe2>
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	0a 94       	dec	r0
 17a:	e2 f7       	brpl	.-8      	; 0x174 <main+0xde>
 17c:	80 95       	com	r24
 17e:	82 23       	and	r24, r18
 180:	85 b9       	out	0x05, r24	; 5
 182:	2f ef       	ldi	r18, 0xFF	; 255
 184:	82 e5       	ldi	r24, 0x52	; 82
 186:	97 e0       	ldi	r25, 0x07	; 7
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	80 40       	sbci	r24, 0x00	; 0
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <main+0xf2>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0xfc>
 192:	00 00       	nop
			if (i != 0){
				PORTB &= ~(1<<led[i-1]);
 				_delay_ms(DELAY);
			}
		}
		for(uint8_t i = 4; i != 255; --i){
 194:	41 50       	subi	r20, 0x01	; 1
 196:	4f 3f       	cpi	r20, 0xFF	; 255
 198:	61 f6       	brne	.-104    	; 0x132 <main+0x9c>
 19a:	93 cf       	rjmp	.-218    	; 0xc2 <main+0x2c>

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
