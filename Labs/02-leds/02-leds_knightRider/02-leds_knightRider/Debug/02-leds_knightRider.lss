
02-leds_knightRider.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000764  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000678  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ae  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000012ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bc  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ee  00000000  00000000  0000168c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000177a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 9b 00 	jmp	0x136	; 0x136 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>
#include <avr/sfr_defs.h>

int main(void)
{
    DDRB |= (1<<LED_1) | (1<<LED_2) | (1<<LED_3) | (1<<LED_4) | (1<<LED_5);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8f 61       	ori	r24, 0x1F	; 31
  84:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~((1<<LED_1) | (1<<LED_2) | (1<<LED_3) | (1<<LED_4) | (1<<LED_5));
  86:	85 b1       	in	r24, 0x05	; 5
  88:	80 7e       	andi	r24, 0xE0	; 224
  8a:	85 b9       	out	0x05, r24	; 5
    while (1) 
    {
		for(uint8_t i = 0; i != 5; i++){
  8c:	80 e0       	ldi	r24, 0x00	; 0
  8e:	26 c0       	rjmp	.+76     	; 0xdc <main+0x5c>
			PORTB |= (1<<i);
  90:	95 b1       	in	r25, 0x05	; 5
  92:	48 2f       	mov	r20, r24
  94:	50 e0       	ldi	r21, 0x00	; 0
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	08 2e       	mov	r0, r24
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <main+0x22>
  9e:	22 0f       	add	r18, r18
  a0:	33 1f       	adc	r19, r19
  a2:	0a 94       	dec	r0
  a4:	e2 f7       	brpl	.-8      	; 0x9e <main+0x1e>
  a6:	29 2b       	or	r18, r25
  a8:	25 b9       	out	0x05, r18	; 5
			if (i != 0){
  aa:	88 23       	and	r24, r24
  ac:	b1 f0       	breq	.+44     	; 0xda <main+0x5a>
				PORTB &= ~(1<<(i-1));
  ae:	95 b1       	in	r25, 0x05	; 5
  b0:	41 50       	subi	r20, 0x01	; 1
  b2:	51 09       	sbc	r21, r1
  b4:	21 e0       	ldi	r18, 0x01	; 1
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <main+0x3e>
  ba:	22 0f       	add	r18, r18
  bc:	33 1f       	adc	r19, r19
  be:	4a 95       	dec	r20
  c0:	e2 f7       	brpl	.-8      	; 0xba <main+0x3a>
  c2:	20 95       	com	r18
  c4:	29 23       	and	r18, r25
  c6:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	32 e5       	ldi	r19, 0x52	; 82
  cc:	97 e0       	ldi	r25, 0x07	; 7
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	30 40       	sbci	r19, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x4e>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x58>
  d8:	00 00       	nop
{
    DDRB |= (1<<LED_1) | (1<<LED_2) | (1<<LED_3) | (1<<LED_4) | (1<<LED_5);
	PORTB &= ~((1<<LED_1) | (1<<LED_2) | (1<<LED_3) | (1<<LED_4) | (1<<LED_5));
    while (1) 
    {
		for(uint8_t i = 0; i != 5; i++){
  da:	8f 5f       	subi	r24, 0xFF	; 255
  dc:	85 30       	cpi	r24, 0x05	; 5
  de:	c1 f6       	brne	.-80     	; 0x90 <main+0x10>
  e0:	84 e0       	ldi	r24, 0x04	; 4
  e2:	26 c0       	rjmp	.+76     	; 0x130 <main+0xb0>
				PORTB &= ~(1<<(i-1));
 				_delay_ms(DELAY);
			}
		}
		for(uint8_t i = 4; i != 255; --i){
			PORTB |= (1<<i);
  e4:	95 b1       	in	r25, 0x05	; 5
  e6:	48 2f       	mov	r20, r24
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	08 2e       	mov	r0, r24
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <main+0x76>
  f2:	22 0f       	add	r18, r18
  f4:	33 1f       	adc	r19, r19
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <main+0x72>
  fa:	29 2b       	or	r18, r25
  fc:	25 b9       	out	0x05, r18	; 5
			if (i != 4){
  fe:	84 30       	cpi	r24, 0x04	; 4
 100:	b1 f0       	breq	.+44     	; 0x12e <main+0xae>
				PORTB &= ~(1<<(i+1));
 102:	95 b1       	in	r25, 0x05	; 5
 104:	4f 5f       	subi	r20, 0xFF	; 255
 106:	5f 4f       	sbci	r21, 0xFF	; 255
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <main+0x92>
 10e:	22 0f       	add	r18, r18
 110:	33 1f       	adc	r19, r19
 112:	4a 95       	dec	r20
 114:	e2 f7       	brpl	.-8      	; 0x10e <main+0x8e>
 116:	20 95       	com	r18
 118:	29 23       	and	r18, r25
 11a:	25 b9       	out	0x05, r18	; 5
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	32 e5       	ldi	r19, 0x52	; 82
 120:	97 e0       	ldi	r25, 0x07	; 7
 122:	21 50       	subi	r18, 0x01	; 1
 124:	30 40       	sbci	r19, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0xa2>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0xac>
 12c:	00 00       	nop
			if (i != 0){
				PORTB &= ~(1<<(i-1));
 				_delay_ms(DELAY);
			}
		}
		for(uint8_t i = 4; i != 255; --i){
 12e:	81 50       	subi	r24, 0x01	; 1
 130:	8f 3f       	cpi	r24, 0xFF	; 255
 132:	c1 f6       	brne	.-80     	; 0xe4 <main+0x64>
 134:	ab cf       	rjmp	.-170    	; 0x8c <main+0xc>

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
